<?php
/**
 * LicenseServiceApi
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Layer7\Openprovider\ApiException;
use Layer7\Openprovider\Configuration;
use Layer7\Openprovider\HeaderSelector;
use Layer7\Openprovider\ObjectSerializer;

/**
 * LicenseServiceApi Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LicenseServiceApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPleskLicense' => [
            'application/json',
        ],
        'createVirtuozzoLicense' => [
            'application/json',
        ],
        'deletePleskLicense' => [
            'application/json',
        ],
        'deleteVirtuozzoLicense' => [
            'application/json',
        ],
        'getPleskKey' => [
            'application/json',
        ],
        'getPleskLicense' => [
            'application/json',
        ],
        'getVirtuozzoKey' => [
            'application/json',
        ],
        'getVirtuozzoLicense' => [
            'application/json',
        ],
        'listItems' => [
            'application/json',
        ],
        'listLicensesWithPriceVersion' => [
            'application/json',
        ],
        'listPleskLicenses' => [
            'application/json',
        ],
        'listVirtuozzoLicenses' => [
            'application/json',
        ],
        'resetHwid' => [
            'application/json',
        ],
        'updatePleskLicense' => [
            'application/json',
        ],
        'updateVirtuozzoLicense' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createPleskLicense
     *
     * Create plesk license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function createPleskLicense(
        \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['createPleskLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse
    {
        list($response) = $this->createPleskLicenseWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation createPleskLicenseWithHttpInfo
     *
     * Create plesk license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPleskLicenseWithHttpInfo(
        \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['createPleskLicense'][0]
    ): array
    {
        $request = $this->createPleskLicenseRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPleskLicenseAsync
     *
     * Create plesk license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPleskLicenseAsync(
        \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['createPleskLicense'][0]
    ): PromiseInterface
    {
        return $this->createPleskLicenseAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPleskLicenseAsyncWithHttpInfo
     *
     * Create plesk license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPleskLicenseAsyncWithHttpInfo(
        $body,
        string $contentType = self::contentTypes['createPleskLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseCreatePleskLicenseResponse';
        $request = $this->createPleskLicenseRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPleskLicense'
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPleskLicenseRequest(
        $body,
        string $contentType = self::contentTypes['createPleskLicense'][0]
    ): Request
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createPleskLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/plesk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createVirtuozzoLicense
     *
     * Create virtuozzo license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function createVirtuozzoLicense(
        \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['createVirtuozzoLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse
    {
        list($response) = $this->createVirtuozzoLicenseWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation createVirtuozzoLicenseWithHttpInfo
     *
     * Create virtuozzo license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVirtuozzoLicenseWithHttpInfo(
        \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['createVirtuozzoLicense'][0]
    ): array
    {
        $request = $this->createVirtuozzoLicenseRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVirtuozzoLicenseAsync
     *
     * Create virtuozzo license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createVirtuozzoLicenseAsync(
        \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['createVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        return $this->createVirtuozzoLicenseAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVirtuozzoLicenseAsyncWithHttpInfo
     *
     * Create virtuozzo license
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createVirtuozzoLicenseAsyncWithHttpInfo(
        $body,
        string $contentType = self::contentTypes['createVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseResponse';
        $request = $this->createVirtuozzoLicenseRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVirtuozzoLicense'
     *
     * @param  \Layer7\Openprovider\Model\LicenseCreateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createVirtuozzoLicenseRequest(
        $body,
        string $contentType = self::contentTypes['createVirtuozzoLicense'][0]
    ): Request
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createVirtuozzoLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/virtuozzo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePleskLicense
     *
     * Delete plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function deletePleskLicense(
        int $key_id,
        string $contentType = self::contentTypes['deletePleskLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse
    {
        list($response) = $this->deletePleskLicenseWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePleskLicenseWithHttpInfo
     *
     * Delete plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePleskLicenseWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['deletePleskLicense'][0]
    ): array
    {
        $request = $this->deletePleskLicenseRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePleskLicenseAsync
     *
     * Delete plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePleskLicenseAsync(
        int $key_id,
        string $contentType = self::contentTypes['deletePleskLicense'][0]
    ): PromiseInterface
    {
        return $this->deletePleskLicenseAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePleskLicenseAsyncWithHttpInfo
     *
     * Delete plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePleskLicenseAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['deletePleskLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse';
        $request = $this->deletePleskLicenseRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePleskLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePleskLicenseRequest(
        $key_id,
        string $contentType = self::contentTypes['deletePleskLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling deletePleskLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/plesk/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVirtuozzoLicense
     *
     * Delete virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function deleteVirtuozzoLicense(
        int $key_id,
        string $contentType = self::contentTypes['deleteVirtuozzoLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse
    {
        list($response) = $this->deleteVirtuozzoLicenseWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteVirtuozzoLicenseWithHttpInfo
     *
     * Delete virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseDeleteLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVirtuozzoLicenseWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['deleteVirtuozzoLicense'][0]
    ): array
    {
        $request = $this->deleteVirtuozzoLicenseRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVirtuozzoLicenseAsync
     *
     * Delete virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteVirtuozzoLicenseAsync(
        int $key_id,
        string $contentType = self::contentTypes['deleteVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        return $this->deleteVirtuozzoLicenseAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVirtuozzoLicenseAsyncWithHttpInfo
     *
     * Delete virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteVirtuozzoLicenseAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['deleteVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseDeleteLicenseResponse';
        $request = $this->deleteVirtuozzoLicenseRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVirtuozzoLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteVirtuozzoLicenseRequest(
        $key_id,
        string $contentType = self::contentTypes['deleteVirtuozzoLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling deleteVirtuozzoLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/virtuozzo/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPleskKey
     *
     * Get plesk key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskKey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function getPleskKey(
        int $key_id,
        string $contentType = self::contentTypes['getPleskKey'][0]
    ): \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse
    {
        list($response) = $this->getPleskKeyWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation getPleskKeyWithHttpInfo
     *
     * Get plesk key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskKey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPleskKeyWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['getPleskKey'][0]
    ): array
    {
        $request = $this->getPleskKeyRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPleskKeyAsync
     *
     * Get plesk key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPleskKeyAsync(
        int $key_id,
        string $contentType = self::contentTypes['getPleskKey'][0]
    ): PromiseInterface
    {
        return $this->getPleskKeyAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPleskKeyAsyncWithHttpInfo
     *
     * Get plesk key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPleskKeyAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['getPleskKey'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse';
        $request = $this->getPleskKeyRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPleskKey'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPleskKeyRequest(
        $key_id,
        string $contentType = self::contentTypes['getPleskKey'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling getPleskKey'
            );
        }


        $resourcePath = '/v1beta/licenses/plesk/key/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPleskLicense
     *
     * Get plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseGetLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function getPleskLicense(
        int $key_id,
        string $contentType = self::contentTypes['getPleskLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseGetLicenseResponse
    {
        list($response) = $this->getPleskLicenseWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation getPleskLicenseWithHttpInfo
     *
     * Get plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseGetLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPleskLicenseWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['getPleskLicense'][0]
    ): array
    {
        $request = $this->getPleskLicenseRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseGetLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseGetLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseGetLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseGetLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPleskLicenseAsync
     *
     * Get plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPleskLicenseAsync(
        int $key_id,
        string $contentType = self::contentTypes['getPleskLicense'][0]
    ): PromiseInterface
    {
        return $this->getPleskLicenseAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPleskLicenseAsyncWithHttpInfo
     *
     * Get plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPleskLicenseAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['getPleskLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseResponse';
        $request = $this->getPleskLicenseRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPleskLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPleskLicenseRequest(
        $key_id,
        string $contentType = self::contentTypes['getPleskLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling getPleskLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/plesk/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtuozzoKey
     *
     * Get virtuozzo key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoKey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function getVirtuozzoKey(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoKey'][0]
    ): \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse
    {
        list($response) = $this->getVirtuozzoKeyWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation getVirtuozzoKeyWithHttpInfo
     *
     * Get virtuozzo key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoKey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtuozzoKeyWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoKey'][0]
    ): array
    {
        $request = $this->getVirtuozzoKeyRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVirtuozzoKeyAsync
     *
     * Get virtuozzo key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getVirtuozzoKeyAsync(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoKey'][0]
    ): PromiseInterface
    {
        return $this->getVirtuozzoKeyAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtuozzoKeyAsyncWithHttpInfo
     *
     * Get virtuozzo key
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getVirtuozzoKeyAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['getVirtuozzoKey'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseKeyResponse';
        $request = $this->getVirtuozzoKeyRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtuozzoKey'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoKey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtuozzoKeyRequest(
        $key_id,
        string $contentType = self::contentTypes['getVirtuozzoKey'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling getVirtuozzoKey'
            );
        }


        $resourcePath = '/v1beta/licenses/virtuozzo/{key_id}/key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtuozzoLicense
     *
     * Get virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseGetLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function getVirtuozzoLicense(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseGetLicenseResponse
    {
        list($response) = $this->getVirtuozzoLicenseWithHttpInfo($key_id, $contentType);
        return $response;
    }

    /**
     * Operation getVirtuozzoLicenseWithHttpInfo
     *
     * Get virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseGetLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtuozzoLicenseWithHttpInfo(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoLicense'][0]
    ): array
    {
        $request = $this->getVirtuozzoLicenseRequest($key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseGetLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseGetLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseGetLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseGetLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVirtuozzoLicenseAsync
     *
     * Get virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getVirtuozzoLicenseAsync(
        int $key_id,
        string $contentType = self::contentTypes['getVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        return $this->getVirtuozzoLicenseAsyncWithHttpInfo($key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtuozzoLicenseAsyncWithHttpInfo
     *
     * Get virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getVirtuozzoLicenseAsyncWithHttpInfo(
        $key_id,
        string $contentType = self::contentTypes['getVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseGetLicenseResponse';
        $request = $this->getVirtuozzoLicenseRequest($key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtuozzoLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtuozzoLicenseRequest(
        $key_id,
        string $contentType = self::contentTypes['getVirtuozzoLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling getVirtuozzoLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/virtuozzo/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItems
     *
     * List items
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listItems'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseListItemsResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function listItems(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        string $contentType = self::contentTypes['listItems'][0]
    ): \Layer7\Openprovider\Model\LicenseListItemsResponse
    {
        list($response) = $this->listItemsWithHttpInfo($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $contentType);
        return $response;
    }

    /**
     * Operation listItemsWithHttpInfo
     *
     * List items
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listItems'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseListItemsResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemsWithHttpInfo(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        string $contentType = self::contentTypes['listItems'][0]
    ): array
    {
        $request = $this->listItemsRequest($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseListItemsResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseListItemsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseListItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseListItemsResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseListItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemsAsync
     *
     * List items
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listItemsAsync(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        string $contentType = self::contentTypes['listItems'][0]
    ): PromiseInterface
    {
        return $this->listItemsAsyncWithHttpInfo($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemsAsyncWithHttpInfo
     *
     * List items
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listItemsAsyncWithHttpInfo(
        $limit = null,
        $offset = null,
        $order_by_id = null,
        $order_by_key_id = null,
        $order_by_title = null,
        $order_by_product = null,
        $order_by_status = null,
        $order_by_key_number = null,
        $order_by_expiration_date = null,
        $product = null,
        string $contentType = self::contentTypes['listItems'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseListItemsResponse';
        $request = $this->listItemsRequest($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItems'
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listItems'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listItemsRequest(
        $limit = null,
        $offset = null,
        $order_by_id = null,
        $order_by_key_id = null,
        $order_by_title = null,
        $order_by_product = null,
        $order_by_status = null,
        $order_by_key_number = null,
        $order_by_expiration_date = null,
        $product = null,
        string $contentType = self::contentTypes['listItems'][0]
    ): Request
    {












        $resourcePath = '/v1beta/licenses/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_id,
            'order_by.id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_key_id,
            'order_by.key_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_title,
            'order_by.title', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_product,
            'order_by.product', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_status,
            'order_by.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_key_number,
            'order_by.key_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_expiration_date,
            'order_by.expiration_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLicensesWithPriceVersion
     *
     * List licenses with price version
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string|null $status License status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLicensesWithPriceVersion'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function listLicensesWithPriceVersion(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        ?string $status = null,
        string $contentType = self::contentTypes['listLicensesWithPriceVersion'][0]
    ): \Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse
    {
        list($response) = $this->listLicensesWithPriceVersionWithHttpInfo($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $status, $contentType);
        return $response;
    }

    /**
     * Operation listLicensesWithPriceVersionWithHttpInfo
     *
     * List licenses with price version
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string|null $status License status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLicensesWithPriceVersion'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLicensesWithPriceVersionWithHttpInfo(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        ?string $status = null,
        string $contentType = self::contentTypes['listLicensesWithPriceVersion'][0]
    ): array
    {
        $request = $this->listLicensesWithPriceVersionRequest($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLicensesWithPriceVersionAsync
     *
     * List licenses with price version
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string|null $status License status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLicensesWithPriceVersion'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLicensesWithPriceVersionAsync(
        ?int $limit = null,
        ?int $offset = null,
        ?string $order_by_id = null,
        ?string $order_by_key_id = null,
        ?string $order_by_title = null,
        ?string $order_by_product = null,
        ?string $order_by_status = null,
        ?string $order_by_key_number = null,
        ?string $order_by_expiration_date = null,
        ?string $product = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        ?string $status = null,
        string $contentType = self::contentTypes['listLicensesWithPriceVersion'][0]
    ): PromiseInterface
    {
        return $this->listLicensesWithPriceVersionAsyncWithHttpInfo($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLicensesWithPriceVersionAsyncWithHttpInfo
     *
     * List licenses with price version
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string|null $status License status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLicensesWithPriceVersion'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLicensesWithPriceVersionAsyncWithHttpInfo(
        $limit = null,
        $offset = null,
        $order_by_id = null,
        $order_by_key_id = null,
        $order_by_title = null,
        $order_by_product = null,
        $order_by_status = null,
        $order_by_key_number = null,
        $order_by_expiration_date = null,
        $product = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        $status = null,
        string $contentType = self::contentTypes['listLicensesWithPriceVersion'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesWithPriceVersionResponse';
        $request = $this->listLicensesWithPriceVersionRequest($limit, $offset, $order_by_id, $order_by_key_id, $order_by_title, $order_by_product, $order_by_status, $order_by_key_number, $order_by_expiration_date, $product, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLicensesWithPriceVersion'
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  string|null $order_by_id Object ID. (optional)
     * @param  string|null $order_by_key_id License key ID. (optional)
     * @param  string|null $order_by_title Custom license title. (optional)
     * @param  string|null $order_by_product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $order_by_status License status. (optional)
     * @param  string|null $order_by_key_number License key number. (optional)
     * @param  string|null $order_by_expiration_date License expiration date. (optional)
     * @param  string|null $product Product type (Plesk or Virtuozzo). (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string|null $status License status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLicensesWithPriceVersion'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLicensesWithPriceVersionRequest(
        $limit = null,
        $offset = null,
        $order_by_id = null,
        $order_by_key_id = null,
        $order_by_title = null,
        $order_by_product = null,
        $order_by_status = null,
        $order_by_key_number = null,
        $order_by_expiration_date = null,
        $product = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        $status = null,
        string $contentType = self::contentTypes['listLicensesWithPriceVersion'][0]
    ): Request
    {

















        $resourcePath = '/v1beta/licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_id,
            'order_by.id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_key_id,
            'order_by.key_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_title,
            'order_by.title', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_product,
            'order_by.product', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_status,
            'order_by.status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_key_number,
            'order_by.key_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_expiration_date,
            'order_by.expiration_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number,
            'key_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title_pattern,
            'title_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number_pattern,
            'key_number_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_key_id,
            'parent_key_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPleskLicenses
     *
     * List plesk licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPleskLicenses'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseListLicensesResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function listPleskLicenses(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listPleskLicenses'][0]
    ): \Layer7\Openprovider\Model\LicenseListLicensesResponse
    {
        list($response) = $this->listPleskLicensesWithHttpInfo($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);
        return $response;
    }

    /**
     * Operation listPleskLicensesWithHttpInfo
     *
     * List plesk licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPleskLicenses'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseListLicensesResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPleskLicensesWithHttpInfo(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listPleskLicenses'][0]
    ): array
    {
        $request = $this->listPleskLicensesRequest($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseListLicensesResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseListLicensesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseListLicensesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseListLicensesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPleskLicensesAsync
     *
     * List plesk licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPleskLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listPleskLicensesAsync(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listPleskLicenses'][0]
    ): PromiseInterface
    {
        return $this->listPleskLicensesAsyncWithHttpInfo($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPleskLicensesAsyncWithHttpInfo
     *
     * List plesk licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPleskLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listPleskLicensesAsyncWithHttpInfo(
        $limit = null,
        $offset = null,
        $key_id = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        string $contentType = self::contentTypes['listPleskLicenses'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesResponse';
        $request = $this->listPleskLicensesRequest($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPleskLicenses'
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPleskLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPleskLicensesRequest(
        $limit = null,
        $offset = null,
        $key_id = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        string $contentType = self::contentTypes['listPleskLicenses'][0]
    ): Request
    {









        $resourcePath = '/v1beta/licenses/plesk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_id,
            'key_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number,
            'key_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title_pattern,
            'title_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number_pattern,
            'key_number_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_key_id,
            'parent_key_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listVirtuozzoLicenses
     *
     * List virtuozzo licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVirtuozzoLicenses'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseListLicensesResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function listVirtuozzoLicenses(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listVirtuozzoLicenses'][0]
    ): \Layer7\Openprovider\Model\LicenseListLicensesResponse
    {
        list($response) = $this->listVirtuozzoLicensesWithHttpInfo($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);
        return $response;
    }

    /**
     * Operation listVirtuozzoLicensesWithHttpInfo
     *
     * List virtuozzo licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVirtuozzoLicenses'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseListLicensesResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVirtuozzoLicensesWithHttpInfo(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listVirtuozzoLicenses'][0]
    ): array
    {
        $request = $this->listVirtuozzoLicensesRequest($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseListLicensesResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseListLicensesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseListLicensesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseListLicensesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listVirtuozzoLicensesAsync
     *
     * List virtuozzo licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVirtuozzoLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listVirtuozzoLicensesAsync(
        ?int $limit = null,
        ?int $offset = null,
        ?int $key_id = null,
        ?string $key_number = null,
        ?string $title_pattern = null,
        ?string $key_number_pattern = null,
        ?int $parent_key_id = null,
        string $contentType = self::contentTypes['listVirtuozzoLicenses'][0]
    ): PromiseInterface
    {
        return $this->listVirtuozzoLicensesAsyncWithHttpInfo($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listVirtuozzoLicensesAsyncWithHttpInfo
     *
     * List virtuozzo licenses
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVirtuozzoLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listVirtuozzoLicensesAsyncWithHttpInfo(
        $limit = null,
        $offset = null,
        $key_id = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        string $contentType = self::contentTypes['listVirtuozzoLicenses'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseListLicensesResponse';
        $request = $this->listVirtuozzoLicensesRequest($limit, $offset, $key_id, $key_number, $title_pattern, $key_number_pattern, $parent_key_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listVirtuozzoLicenses'
     *
     * @param  int|null $limit Output limit. (optional)
     * @param  int|null $offset Output offset. (optional)
     * @param  int|null $key_id License key ID. (optional)
     * @param  string|null $key_number License key number. (optional)
     * @param  string|null $title_pattern Custom title pattern. Wildcard (*) can be sued. (optional)
     * @param  string|null $key_number_pattern License key number pattern. Wildcard (*) can be used. (optional)
     * @param  int|null $parent_key_id Key ID of the partent license. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listVirtuozzoLicenses'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listVirtuozzoLicensesRequest(
        $limit = null,
        $offset = null,
        $key_id = null,
        $key_number = null,
        $title_pattern = null,
        $key_number_pattern = null,
        $parent_key_id = null,
        string $contentType = self::contentTypes['listVirtuozzoLicenses'][0]
    ): Request
    {









        $resourcePath = '/v1beta/licenses/virtuozzo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_id,
            'key_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number,
            'key_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $title_pattern,
            'title_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key_number_pattern,
            'key_number_pattern', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_key_id,
            'parent_key_id', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetHwid
     *
     * Reset hwid
     *
     * @param  string $product Product type (Plesk or Virtuozzo) (required)
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseResetHwidRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetHwid'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseResetHwidResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function resetHwid(
        string $product,
        int $key_id,
        \Layer7\Openprovider\Model\LicenseResetHwidRequest $body,
        string $contentType = self::contentTypes['resetHwid'][0]
    ): \Layer7\Openprovider\Model\LicenseResetHwidResponse
    {
        list($response) = $this->resetHwidWithHttpInfo($product, $key_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation resetHwidWithHttpInfo
     *
     * Reset hwid
     *
     * @param  string $product Product type (Plesk or Virtuozzo) (required)
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseResetHwidRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetHwid'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseResetHwidResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetHwidWithHttpInfo(
        string $product,
        int $key_id,
        \Layer7\Openprovider\Model\LicenseResetHwidRequest $body,
        string $contentType = self::contentTypes['resetHwid'][0]
    ): array
    {
        $request = $this->resetHwidRequest($product, $key_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseResetHwidResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseResetHwidResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseResetHwidResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseResetHwidResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseResetHwidResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetHwidAsync
     *
     * Reset hwid
     *
     * @param  string $product Product type (Plesk or Virtuozzo) (required)
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseResetHwidRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetHwid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function resetHwidAsync(
        string $product,
        int $key_id,
        \Layer7\Openprovider\Model\LicenseResetHwidRequest $body,
        string $contentType = self::contentTypes['resetHwid'][0]
    ): PromiseInterface
    {
        return $this->resetHwidAsyncWithHttpInfo($product, $key_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetHwidAsyncWithHttpInfo
     *
     * Reset hwid
     *
     * @param  string $product Product type (Plesk or Virtuozzo) (required)
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseResetHwidRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetHwid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function resetHwidAsyncWithHttpInfo(
        $product,
        $key_id,
        $body,
        string $contentType = self::contentTypes['resetHwid'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseResetHwidResponse';
        $request = $this->resetHwidRequest($product, $key_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetHwid'
     *
     * @param  string $product Product type (Plesk or Virtuozzo) (required)
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseResetHwidRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetHwid'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetHwidRequest(
        $product,
        $key_id,
        $body,
        string $contentType = self::contentTypes['resetHwid'][0]
    ): Request
    {

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $product when calling resetHwid'
            );
        }

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling resetHwid'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling resetHwid'
            );
        }


        $resourcePath = '/v1beta/licenses/hwids/reset/{product}/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product !== null) {
            $resourcePath = str_replace(
                '{' . 'product' . '}',
                ObjectSerializer::toPathValue($product),
                $resourcePath
            );
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePleskLicense
     *
     * Update plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function updatePleskLicense(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['updatePleskLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse
    {
        list($response) = $this->updatePleskLicenseWithHttpInfo($key_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation updatePleskLicenseWithHttpInfo
     *
     * Update plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePleskLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePleskLicenseWithHttpInfo(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['updatePleskLicense'][0]
    ): array
    {
        $request = $this->updatePleskLicenseRequest($key_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePleskLicenseAsync
     *
     * Update plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePleskLicenseAsync(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body,
        string $contentType = self::contentTypes['updatePleskLicense'][0]
    ): PromiseInterface
    {
        return $this->updatePleskLicenseAsyncWithHttpInfo($key_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePleskLicenseAsyncWithHttpInfo
     *
     * Update plesk license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePleskLicenseAsyncWithHttpInfo(
        $key_id,
        $body,
        string $contentType = self::contentTypes['updatePleskLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse';
        $request = $this->updatePleskLicenseRequest($key_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePleskLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdatePleskLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePleskLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePleskLicenseRequest(
        $key_id,
        $body,
        string $contentType = self::contentTypes['updatePleskLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling updatePleskLicense'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updatePleskLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/plesk/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVirtuozzoLicense
     *
     * Update virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse|\Layer7\Openprovider\Model\ErrorError
     */
    public function updateVirtuozzoLicense(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['updateVirtuozzoLicense'][0]
    ): \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse
    {
        list($response) = $this->updateVirtuozzoLicenseWithHttpInfo($key_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation updateVirtuozzoLicenseWithHttpInfo
     *
     * Update virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Layer7\Openprovider\Model\LicenseUpdateLicenseResponse|\Layer7\Openprovider\Model\ErrorError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVirtuozzoLicenseWithHttpInfo(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['updateVirtuozzoLicense'][0]
    ): array
    {
        $request = $this->updateVirtuozzoLicenseRequest($key_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if (in_array('\Layer7\Openprovider\Model\ErrorError', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Layer7\Openprovider\Model\ErrorError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Layer7\Openprovider\Model\ErrorError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Layer7\Openprovider\Model\ErrorError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVirtuozzoLicenseAsync
     *
     * Update virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateVirtuozzoLicenseAsync(
        int $key_id,
        \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body,
        string $contentType = self::contentTypes['updateVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        return $this->updateVirtuozzoLicenseAsyncWithHttpInfo($key_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVirtuozzoLicenseAsyncWithHttpInfo
     *
     * Update virtuozzo license
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateVirtuozzoLicenseAsyncWithHttpInfo(
        $key_id,
        $body,
        string $contentType = self::contentTypes['updateVirtuozzoLicense'][0]
    ): PromiseInterface
    {
        $returnType = '\Layer7\Openprovider\Model\LicenseUpdateLicenseResponse';
        $request = $this->updateVirtuozzoLicenseRequest($key_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVirtuozzoLicense'
     *
     * @param  int $key_id License key ID (required)
     * @param  \Layer7\Openprovider\Model\LicenseUpdateVirtuozzoLicenseRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVirtuozzoLicense'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVirtuozzoLicenseRequest(
        $key_id,
        $body,
        string $contentType = self::contentTypes['updateVirtuozzoLicense'][0]
    ): Request
    {

        // verify the required parameter 'key_id' is set
        if ($key_id === null || (is_array($key_id) && count($key_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $key_id when calling updateVirtuozzoLicense'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateVirtuozzoLicense'
            );
        }


        $resourcePath = '/v1beta/licenses/virtuozzo/{key_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace(
                '{' . 'key_id' . '}',
                ObjectSerializer::toPathValue($key_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
