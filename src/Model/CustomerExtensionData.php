<?php
/**
 * CustomerExtensionData
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * CustomerExtensionData Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CustomerExtensionData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'customerExtensionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'admin_type' => 'string',
        'applicant_purpose' => 'string',
        'birth_date' => 'string',
        'company_name_cyrillic' => 'string',
        'company_name_latin' => 'string',
        'company_registration_number' => 'string',
        'contact_title' => 'string',
        'ens_auth_id' => 'string',
        'ens_key' => 'string',
        'first_name_cyrillic' => 'string',
        'first_name_latin' => 'string',
        'hr_member' => 'string',
        'industry_class' => 'string',
        'is_private_enterpreneur' => 'string',
        'last_name_cyrillic' => 'string',
        'last_name_latin' => 'string',
        'legal_address_cyrillic' => 'string',
        'middle_name_cyrillic' => 'string',
        'middle_name_latin' => 'string',
        'mobile_phone_number' => 'string',
        'nexus_category' => 'string',
        'org_type' => 'string',
        'passport_issue_date' => 'string',
        'passport_issuer' => 'string',
        'passport_number' => 'string',
        'passport_series' => 'string',
        'postal_address_cyrillic' => 'string',
        'social_security_number' => 'string',
        'tax_payer_number' => 'string',
        'uin' => 'string',
        'user_type' => 'string',
        'vat' => 'string',
        'website' => 'string',
        'whois_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'admin_type' => null,
        'applicant_purpose' => null,
        'birth_date' => null,
        'company_name_cyrillic' => null,
        'company_name_latin' => null,
        'company_registration_number' => null,
        'contact_title' => null,
        'ens_auth_id' => null,
        'ens_key' => null,
        'first_name_cyrillic' => null,
        'first_name_latin' => null,
        'hr_member' => null,
        'industry_class' => null,
        'is_private_enterpreneur' => null,
        'last_name_cyrillic' => null,
        'last_name_latin' => null,
        'legal_address_cyrillic' => null,
        'middle_name_cyrillic' => null,
        'middle_name_latin' => null,
        'mobile_phone_number' => null,
        'nexus_category' => null,
        'org_type' => null,
        'passport_issue_date' => null,
        'passport_issuer' => null,
        'passport_number' => null,
        'passport_series' => null,
        'postal_address_cyrillic' => null,
        'social_security_number' => null,
        'tax_payer_number' => null,
        'uin' => null,
        'user_type' => null,
        'vat' => null,
        'website' => null,
        'whois_email' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'admin_type' => false,
        'applicant_purpose' => false,
        'birth_date' => false,
        'company_name_cyrillic' => false,
        'company_name_latin' => false,
        'company_registration_number' => false,
        'contact_title' => false,
        'ens_auth_id' => false,
        'ens_key' => false,
        'first_name_cyrillic' => false,
        'first_name_latin' => false,
        'hr_member' => false,
        'industry_class' => false,
        'is_private_enterpreneur' => false,
        'last_name_cyrillic' => false,
        'last_name_latin' => false,
        'legal_address_cyrillic' => false,
        'middle_name_cyrillic' => false,
        'middle_name_latin' => false,
        'mobile_phone_number' => false,
        'nexus_category' => false,
        'org_type' => false,
        'passport_issue_date' => false,
        'passport_issuer' => false,
        'passport_number' => false,
        'passport_series' => false,
        'postal_address_cyrillic' => false,
        'social_security_number' => false,
        'tax_payer_number' => false,
        'uin' => false,
        'user_type' => false,
        'vat' => false,
        'website' => false,
        'whois_email' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'admin_type' => 'admin_type',
        'applicant_purpose' => 'applicant_purpose',
        'birth_date' => 'birth_date',
        'company_name_cyrillic' => 'company_name_cyrillic',
        'company_name_latin' => 'company_name_latin',
        'company_registration_number' => 'company_registration_number',
        'contact_title' => 'contact_title',
        'ens_auth_id' => 'ens_auth_id',
        'ens_key' => 'ens_key',
        'first_name_cyrillic' => 'first_name_cyrillic',
        'first_name_latin' => 'first_name_latin',
        'hr_member' => 'hr_member',
        'industry_class' => 'industry_class',
        'is_private_enterpreneur' => 'is_private_enterpreneur',
        'last_name_cyrillic' => 'last_name_cyrillic',
        'last_name_latin' => 'last_name_latin',
        'legal_address_cyrillic' => 'legal_address_cyrillic',
        'middle_name_cyrillic' => 'middle_name_cyrillic',
        'middle_name_latin' => 'middle_name_latin',
        'mobile_phone_number' => 'mobile_phone_number',
        'nexus_category' => 'nexus_category',
        'org_type' => 'org_type',
        'passport_issue_date' => 'passport_issue_date',
        'passport_issuer' => 'passport_issuer',
        'passport_number' => 'passport_number',
        'passport_series' => 'passport_series',
        'postal_address_cyrillic' => 'postal_address_cyrillic',
        'social_security_number' => 'social_security_number',
        'tax_payer_number' => 'tax_payer_number',
        'uin' => 'uin',
        'user_type' => 'user_type',
        'vat' => 'vat',
        'website' => 'website',
        'whois_email' => 'whois_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'admin_type' => 'setAdminType',
        'applicant_purpose' => 'setApplicantPurpose',
        'birth_date' => 'setBirthDate',
        'company_name_cyrillic' => 'setCompanyNameCyrillic',
        'company_name_latin' => 'setCompanyNameLatin',
        'company_registration_number' => 'setCompanyRegistrationNumber',
        'contact_title' => 'setContactTitle',
        'ens_auth_id' => 'setEnsAuthId',
        'ens_key' => 'setEnsKey',
        'first_name_cyrillic' => 'setFirstNameCyrillic',
        'first_name_latin' => 'setFirstNameLatin',
        'hr_member' => 'setHrMember',
        'industry_class' => 'setIndustryClass',
        'is_private_enterpreneur' => 'setIsPrivateEnterpreneur',
        'last_name_cyrillic' => 'setLastNameCyrillic',
        'last_name_latin' => 'setLastNameLatin',
        'legal_address_cyrillic' => 'setLegalAddressCyrillic',
        'middle_name_cyrillic' => 'setMiddleNameCyrillic',
        'middle_name_latin' => 'setMiddleNameLatin',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'nexus_category' => 'setNexusCategory',
        'org_type' => 'setOrgType',
        'passport_issue_date' => 'setPassportIssueDate',
        'passport_issuer' => 'setPassportIssuer',
        'passport_number' => 'setPassportNumber',
        'passport_series' => 'setPassportSeries',
        'postal_address_cyrillic' => 'setPostalAddressCyrillic',
        'social_security_number' => 'setSocialSecurityNumber',
        'tax_payer_number' => 'setTaxPayerNumber',
        'uin' => 'setUin',
        'user_type' => 'setUserType',
        'vat' => 'setVat',
        'website' => 'setWebsite',
        'whois_email' => 'setWhoisEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'admin_type' => 'getAdminType',
        'applicant_purpose' => 'getApplicantPurpose',
        'birth_date' => 'getBirthDate',
        'company_name_cyrillic' => 'getCompanyNameCyrillic',
        'company_name_latin' => 'getCompanyNameLatin',
        'company_registration_number' => 'getCompanyRegistrationNumber',
        'contact_title' => 'getContactTitle',
        'ens_auth_id' => 'getEnsAuthId',
        'ens_key' => 'getEnsKey',
        'first_name_cyrillic' => 'getFirstNameCyrillic',
        'first_name_latin' => 'getFirstNameLatin',
        'hr_member' => 'getHrMember',
        'industry_class' => 'getIndustryClass',
        'is_private_enterpreneur' => 'getIsPrivateEnterpreneur',
        'last_name_cyrillic' => 'getLastNameCyrillic',
        'last_name_latin' => 'getLastNameLatin',
        'legal_address_cyrillic' => 'getLegalAddressCyrillic',
        'middle_name_cyrillic' => 'getMiddleNameCyrillic',
        'middle_name_latin' => 'getMiddleNameLatin',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'nexus_category' => 'getNexusCategory',
        'org_type' => 'getOrgType',
        'passport_issue_date' => 'getPassportIssueDate',
        'passport_issuer' => 'getPassportIssuer',
        'passport_number' => 'getPassportNumber',
        'passport_series' => 'getPassportSeries',
        'postal_address_cyrillic' => 'getPostalAddressCyrillic',
        'social_security_number' => 'getSocialSecurityNumber',
        'tax_payer_number' => 'getTaxPayerNumber',
        'uin' => 'getUin',
        'user_type' => 'getUserType',
        'vat' => 'getVat',
        'website' => 'getWebsite',
        'whois_email' => 'getWhoisEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_type', $data ?? [], null);
        $this->setIfExists('applicant_purpose', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('company_name_cyrillic', $data ?? [], null);
        $this->setIfExists('company_name_latin', $data ?? [], null);
        $this->setIfExists('company_registration_number', $data ?? [], null);
        $this->setIfExists('contact_title', $data ?? [], null);
        $this->setIfExists('ens_auth_id', $data ?? [], null);
        $this->setIfExists('ens_key', $data ?? [], null);
        $this->setIfExists('first_name_cyrillic', $data ?? [], null);
        $this->setIfExists('first_name_latin', $data ?? [], null);
        $this->setIfExists('hr_member', $data ?? [], null);
        $this->setIfExists('industry_class', $data ?? [], null);
        $this->setIfExists('is_private_enterpreneur', $data ?? [], null);
        $this->setIfExists('last_name_cyrillic', $data ?? [], null);
        $this->setIfExists('last_name_latin', $data ?? [], null);
        $this->setIfExists('legal_address_cyrillic', $data ?? [], null);
        $this->setIfExists('middle_name_cyrillic', $data ?? [], null);
        $this->setIfExists('middle_name_latin', $data ?? [], null);
        $this->setIfExists('mobile_phone_number', $data ?? [], null);
        $this->setIfExists('nexus_category', $data ?? [], null);
        $this->setIfExists('org_type', $data ?? [], null);
        $this->setIfExists('passport_issue_date', $data ?? [], null);
        $this->setIfExists('passport_issuer', $data ?? [], null);
        $this->setIfExists('passport_number', $data ?? [], null);
        $this->setIfExists('passport_series', $data ?? [], null);
        $this->setIfExists('postal_address_cyrillic', $data ?? [], null);
        $this->setIfExists('social_security_number', $data ?? [], null);
        $this->setIfExists('tax_payer_number', $data ?? [], null);
        $this->setIfExists('uin', $data ?? [], null);
        $this->setIfExists('user_type', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('whois_email', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_type
     *
     * @return string|null
     */
    public function getAdminType(): ?string
    {
        return $this->container['admin_type'];
    }

    /**
     * Sets admin_type
     *
     * @param string|null $admin_type admin_type
     *
     * @return $this
     */
    public function setAdminType(?string $admin_type): static
    {
        if (is_null($admin_type)) {
            throw new InvalidArgumentException('non-nullable admin_type cannot be null');
        }
        $this->container['admin_type'] = $admin_type;

        return $this;
    }

    /**
     * Gets applicant_purpose
     *
     * @return string|null
     */
    public function getApplicantPurpose(): ?string
    {
        return $this->container['applicant_purpose'];
    }

    /**
     * Sets applicant_purpose
     *
     * @param string|null $applicant_purpose applicant_purpose
     *
     * @return $this
     */
    public function setApplicantPurpose(?string $applicant_purpose): static
    {
        if (is_null($applicant_purpose)) {
            throw new InvalidArgumentException('non-nullable applicant_purpose cannot be null');
        }
        $this->container['applicant_purpose'] = $applicant_purpose;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate(): ?string
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return $this
     */
    public function setBirthDate(?string $birth_date): static
    {
        if (is_null($birth_date)) {
            throw new InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets company_name_cyrillic
     *
     * @return string|null
     */
    public function getCompanyNameCyrillic(): ?string
    {
        return $this->container['company_name_cyrillic'];
    }

    /**
     * Sets company_name_cyrillic
     *
     * @param string|null $company_name_cyrillic company_name_cyrillic
     *
     * @return $this
     */
    public function setCompanyNameCyrillic(?string $company_name_cyrillic): static
    {
        if (is_null($company_name_cyrillic)) {
            throw new InvalidArgumentException('non-nullable company_name_cyrillic cannot be null');
        }
        $this->container['company_name_cyrillic'] = $company_name_cyrillic;

        return $this;
    }

    /**
     * Gets company_name_latin
     *
     * @return string|null
     */
    public function getCompanyNameLatin(): ?string
    {
        return $this->container['company_name_latin'];
    }

    /**
     * Sets company_name_latin
     *
     * @param string|null $company_name_latin company_name_latin
     *
     * @return $this
     */
    public function setCompanyNameLatin(?string $company_name_latin): static
    {
        if (is_null($company_name_latin)) {
            throw new InvalidArgumentException('non-nullable company_name_latin cannot be null');
        }
        $this->container['company_name_latin'] = $company_name_latin;

        return $this;
    }

    /**
     * Gets company_registration_number
     *
     * @return string|null
     */
    public function getCompanyRegistrationNumber(): ?string
    {
        return $this->container['company_registration_number'];
    }

    /**
     * Sets company_registration_number
     *
     * @param string|null $company_registration_number company_registration_number
     *
     * @return $this
     */
    public function setCompanyRegistrationNumber(?string $company_registration_number): static
    {
        if (is_null($company_registration_number)) {
            throw new InvalidArgumentException('non-nullable company_registration_number cannot be null');
        }
        $this->container['company_registration_number'] = $company_registration_number;

        return $this;
    }

    /**
     * Gets contact_title
     *
     * @return string|null
     */
    public function getContactTitle(): ?string
    {
        return $this->container['contact_title'];
    }

    /**
     * Sets contact_title
     *
     * @param string|null $contact_title contact_title
     *
     * @return $this
     */
    public function setContactTitle(?string $contact_title): static
    {
        if (is_null($contact_title)) {
            throw new InvalidArgumentException('non-nullable contact_title cannot be null');
        }
        $this->container['contact_title'] = $contact_title;

        return $this;
    }

    /**
     * Gets ens_auth_id
     *
     * @return string|null
     */
    public function getEnsAuthId(): ?string
    {
        return $this->container['ens_auth_id'];
    }

    /**
     * Sets ens_auth_id
     *
     * @param string|null $ens_auth_id ens_auth_id
     *
     * @return $this
     */
    public function setEnsAuthId(?string $ens_auth_id): static
    {
        if (is_null($ens_auth_id)) {
            throw new InvalidArgumentException('non-nullable ens_auth_id cannot be null');
        }
        $this->container['ens_auth_id'] = $ens_auth_id;

        return $this;
    }

    /**
     * Gets ens_key
     *
     * @return string|null
     */
    public function getEnsKey(): ?string
    {
        return $this->container['ens_key'];
    }

    /**
     * Sets ens_key
     *
     * @param string|null $ens_key ens_key
     *
     * @return $this
     */
    public function setEnsKey(?string $ens_key): static
    {
        if (is_null($ens_key)) {
            throw new InvalidArgumentException('non-nullable ens_key cannot be null');
        }
        $this->container['ens_key'] = $ens_key;

        return $this;
    }

    /**
     * Gets first_name_cyrillic
     *
     * @return string|null
     */
    public function getFirstNameCyrillic(): ?string
    {
        return $this->container['first_name_cyrillic'];
    }

    /**
     * Sets first_name_cyrillic
     *
     * @param string|null $first_name_cyrillic first_name_cyrillic
     *
     * @return $this
     */
    public function setFirstNameCyrillic(?string $first_name_cyrillic): static
    {
        if (is_null($first_name_cyrillic)) {
            throw new InvalidArgumentException('non-nullable first_name_cyrillic cannot be null');
        }
        $this->container['first_name_cyrillic'] = $first_name_cyrillic;

        return $this;
    }

    /**
     * Gets first_name_latin
     *
     * @return string|null
     */
    public function getFirstNameLatin(): ?string
    {
        return $this->container['first_name_latin'];
    }

    /**
     * Sets first_name_latin
     *
     * @param string|null $first_name_latin first_name_latin
     *
     * @return $this
     */
    public function setFirstNameLatin(?string $first_name_latin): static
    {
        if (is_null($first_name_latin)) {
            throw new InvalidArgumentException('non-nullable first_name_latin cannot be null');
        }
        $this->container['first_name_latin'] = $first_name_latin;

        return $this;
    }

    /**
     * Gets hr_member
     *
     * @return string|null
     */
    public function getHrMember(): ?string
    {
        return $this->container['hr_member'];
    }

    /**
     * Sets hr_member
     *
     * @param string|null $hr_member hr_member
     *
     * @return $this
     */
    public function setHrMember(?string $hr_member): static
    {
        if (is_null($hr_member)) {
            throw new InvalidArgumentException('non-nullable hr_member cannot be null');
        }
        $this->container['hr_member'] = $hr_member;

        return $this;
    }

    /**
     * Gets industry_class
     *
     * @return string|null
     */
    public function getIndustryClass(): ?string
    {
        return $this->container['industry_class'];
    }

    /**
     * Sets industry_class
     *
     * @param string|null $industry_class industry_class
     *
     * @return $this
     */
    public function setIndustryClass(?string $industry_class): static
    {
        if (is_null($industry_class)) {
            throw new InvalidArgumentException('non-nullable industry_class cannot be null');
        }
        $this->container['industry_class'] = $industry_class;

        return $this;
    }

    /**
     * Gets is_private_enterpreneur
     *
     * @return string|null
     */
    public function getIsPrivateEnterpreneur(): ?string
    {
        return $this->container['is_private_enterpreneur'];
    }

    /**
     * Sets is_private_enterpreneur
     *
     * @param string|null $is_private_enterpreneur is_private_enterpreneur
     *
     * @return $this
     */
    public function setIsPrivateEnterpreneur(?string $is_private_enterpreneur): static
    {
        if (is_null($is_private_enterpreneur)) {
            throw new InvalidArgumentException('non-nullable is_private_enterpreneur cannot be null');
        }
        $this->container['is_private_enterpreneur'] = $is_private_enterpreneur;

        return $this;
    }

    /**
     * Gets last_name_cyrillic
     *
     * @return string|null
     */
    public function getLastNameCyrillic(): ?string
    {
        return $this->container['last_name_cyrillic'];
    }

    /**
     * Sets last_name_cyrillic
     *
     * @param string|null $last_name_cyrillic last_name_cyrillic
     *
     * @return $this
     */
    public function setLastNameCyrillic(?string $last_name_cyrillic): static
    {
        if (is_null($last_name_cyrillic)) {
            throw new InvalidArgumentException('non-nullable last_name_cyrillic cannot be null');
        }
        $this->container['last_name_cyrillic'] = $last_name_cyrillic;

        return $this;
    }

    /**
     * Gets last_name_latin
     *
     * @return string|null
     */
    public function getLastNameLatin(): ?string
    {
        return $this->container['last_name_latin'];
    }

    /**
     * Sets last_name_latin
     *
     * @param string|null $last_name_latin last_name_latin
     *
     * @return $this
     */
    public function setLastNameLatin(?string $last_name_latin): static
    {
        if (is_null($last_name_latin)) {
            throw new InvalidArgumentException('non-nullable last_name_latin cannot be null');
        }
        $this->container['last_name_latin'] = $last_name_latin;

        return $this;
    }

    /**
     * Gets legal_address_cyrillic
     *
     * @return string|null
     */
    public function getLegalAddressCyrillic(): ?string
    {
        return $this->container['legal_address_cyrillic'];
    }

    /**
     * Sets legal_address_cyrillic
     *
     * @param string|null $legal_address_cyrillic legal_address_cyrillic
     *
     * @return $this
     */
    public function setLegalAddressCyrillic(?string $legal_address_cyrillic): static
    {
        if (is_null($legal_address_cyrillic)) {
            throw new InvalidArgumentException('non-nullable legal_address_cyrillic cannot be null');
        }
        $this->container['legal_address_cyrillic'] = $legal_address_cyrillic;

        return $this;
    }

    /**
     * Gets middle_name_cyrillic
     *
     * @return string|null
     */
    public function getMiddleNameCyrillic(): ?string
    {
        return $this->container['middle_name_cyrillic'];
    }

    /**
     * Sets middle_name_cyrillic
     *
     * @param string|null $middle_name_cyrillic middle_name_cyrillic
     *
     * @return $this
     */
    public function setMiddleNameCyrillic(?string $middle_name_cyrillic): static
    {
        if (is_null($middle_name_cyrillic)) {
            throw new InvalidArgumentException('non-nullable middle_name_cyrillic cannot be null');
        }
        $this->container['middle_name_cyrillic'] = $middle_name_cyrillic;

        return $this;
    }

    /**
     * Gets middle_name_latin
     *
     * @return string|null
     */
    public function getMiddleNameLatin(): ?string
    {
        return $this->container['middle_name_latin'];
    }

    /**
     * Sets middle_name_latin
     *
     * @param string|null $middle_name_latin middle_name_latin
     *
     * @return $this
     */
    public function setMiddleNameLatin(?string $middle_name_latin): static
    {
        if (is_null($middle_name_latin)) {
            throw new InvalidArgumentException('non-nullable middle_name_latin cannot be null');
        }
        $this->container['middle_name_latin'] = $middle_name_latin;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     *
     * @return string|null
     */
    public function getMobilePhoneNumber(): ?string
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     *
     * @param string|null $mobile_phone_number mobile_phone_number
     *
     * @return $this
     */
    public function setMobilePhoneNumber(?string $mobile_phone_number): static
    {
        if (is_null($mobile_phone_number)) {
            throw new InvalidArgumentException('non-nullable mobile_phone_number cannot be null');
        }
        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets nexus_category
     *
     * @return string|null
     */
    public function getNexusCategory(): ?string
    {
        return $this->container['nexus_category'];
    }

    /**
     * Sets nexus_category
     *
     * @param string|null $nexus_category nexus_category
     *
     * @return $this
     */
    public function setNexusCategory(?string $nexus_category): static
    {
        if (is_null($nexus_category)) {
            throw new InvalidArgumentException('non-nullable nexus_category cannot be null');
        }
        $this->container['nexus_category'] = $nexus_category;

        return $this;
    }

    /**
     * Gets org_type
     *
     * @return string|null
     */
    public function getOrgType(): ?string
    {
        return $this->container['org_type'];
    }

    /**
     * Sets org_type
     *
     * @param string|null $org_type org_type
     *
     * @return $this
     */
    public function setOrgType(?string $org_type): static
    {
        if (is_null($org_type)) {
            throw new InvalidArgumentException('non-nullable org_type cannot be null');
        }
        $this->container['org_type'] = $org_type;

        return $this;
    }

    /**
     * Gets passport_issue_date
     *
     * @return string|null
     */
    public function getPassportIssueDate(): ?string
    {
        return $this->container['passport_issue_date'];
    }

    /**
     * Sets passport_issue_date
     *
     * @param string|null $passport_issue_date passport_issue_date
     *
     * @return $this
     */
    public function setPassportIssueDate(?string $passport_issue_date): static
    {
        if (is_null($passport_issue_date)) {
            throw new InvalidArgumentException('non-nullable passport_issue_date cannot be null');
        }
        $this->container['passport_issue_date'] = $passport_issue_date;

        return $this;
    }

    /**
     * Gets passport_issuer
     *
     * @return string|null
     */
    public function getPassportIssuer(): ?string
    {
        return $this->container['passport_issuer'];
    }

    /**
     * Sets passport_issuer
     *
     * @param string|null $passport_issuer passport_issuer
     *
     * @return $this
     */
    public function setPassportIssuer(?string $passport_issuer): static
    {
        if (is_null($passport_issuer)) {
            throw new InvalidArgumentException('non-nullable passport_issuer cannot be null');
        }
        $this->container['passport_issuer'] = $passport_issuer;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string|null
     */
    public function getPassportNumber(): ?string
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string|null $passport_number passport_number
     *
     * @return $this
     */
    public function setPassportNumber(?string $passport_number): static
    {
        if (is_null($passport_number)) {
            throw new InvalidArgumentException('non-nullable passport_number cannot be null');
        }
        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets passport_series
     *
     * @return string|null
     */
    public function getPassportSeries(): ?string
    {
        return $this->container['passport_series'];
    }

    /**
     * Sets passport_series
     *
     * @param string|null $passport_series passport_series
     *
     * @return $this
     */
    public function setPassportSeries(?string $passport_series): static
    {
        if (is_null($passport_series)) {
            throw new InvalidArgumentException('non-nullable passport_series cannot be null');
        }
        $this->container['passport_series'] = $passport_series;

        return $this;
    }

    /**
     * Gets postal_address_cyrillic
     *
     * @return string|null
     */
    public function getPostalAddressCyrillic(): ?string
    {
        return $this->container['postal_address_cyrillic'];
    }

    /**
     * Sets postal_address_cyrillic
     *
     * @param string|null $postal_address_cyrillic postal_address_cyrillic
     *
     * @return $this
     */
    public function setPostalAddressCyrillic(?string $postal_address_cyrillic): static
    {
        if (is_null($postal_address_cyrillic)) {
            throw new InvalidArgumentException('non-nullable postal_address_cyrillic cannot be null');
        }
        $this->container['postal_address_cyrillic'] = $postal_address_cyrillic;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber(): ?string
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number social_security_number
     *
     * @return $this
     */
    public function setSocialSecurityNumber(?string $social_security_number): static
    {
        if (is_null($social_security_number)) {
            throw new InvalidArgumentException('non-nullable social_security_number cannot be null');
        }
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets tax_payer_number
     *
     * @return string|null
     */
    public function getTaxPayerNumber(): ?string
    {
        return $this->container['tax_payer_number'];
    }

    /**
     * Sets tax_payer_number
     *
     * @param string|null $tax_payer_number tax_payer_number
     *
     * @return $this
     */
    public function setTaxPayerNumber(?string $tax_payer_number): static
    {
        if (is_null($tax_payer_number)) {
            throw new InvalidArgumentException('non-nullable tax_payer_number cannot be null');
        }
        $this->container['tax_payer_number'] = $tax_payer_number;

        return $this;
    }

    /**
     * Gets uin
     *
     * @return string|null
     */
    public function getUin(): ?string
    {
        return $this->container['uin'];
    }

    /**
     * Sets uin
     *
     * @param string|null $uin uin
     *
     * @return $this
     */
    public function setUin(?string $uin): static
    {
        if (is_null($uin)) {
            throw new InvalidArgumentException('non-nullable uin cannot be null');
        }
        $this->container['uin'] = $uin;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType(): ?string
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type user_type
     *
     * @return $this
     */
    public function setUserType(?string $user_type): static
    {
        if (is_null($user_type)) {
            throw new InvalidArgumentException('non-nullable user_type cannot be null');
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat(): ?string
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return $this
     */
    public function setVat(?string $vat): static
    {
        if (is_null($vat)) {
            throw new InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite(): ?string
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return $this
     */
    public function setWebsite(?string $website): static
    {
        if (is_null($website)) {
            throw new InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets whois_email
     *
     * @return string|null
     */
    public function getWhoisEmail(): ?string
    {
        return $this->container['whois_email'];
    }

    /**
     * Sets whois_email
     *
     * @param string|null $whois_email whois_email
     *
     * @return $this
     */
    public function setWhoisEmail(?string $whois_email): static
    {
        if (is_null($whois_email)) {
            throw new InvalidArgumentException('non-nullable whois_email cannot be null');
        }
        $this->container['whois_email'] = $whois_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


