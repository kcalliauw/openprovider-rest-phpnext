<?php
/**
 * DomainGetDomainResponseData
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * DomainGetDomainResponseData Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DomainGetDomainResponseData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'domainGetDomainResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'abuse_details' => '\Layer7\Openprovider\Model\DomainAbuseDetails',
        'active_date' => 'string',
        'additional_data' => '\Layer7\Openprovider\Model\DomainAdditionalData',
        'admin_handle' => 'string',
        'api_history' => '\Layer7\Openprovider\Model\DomainApiHistory[]',
        'application_id' => 'int',
        'application_mode' => 'string',
        'application_mode_expiration_date' => 'string',
        'application_mode_title' => 'string',
        'application_notice_id' => 'int',
        'application_smd' => 'string',
        'auth_code' => 'string',
        'autorenew' => 'string',
        'billing_handle' => 'string',
        'can_renew' => 'int',
        'comments' => 'string',
        'comments_last_changed_at' => 'string',
        'creation_date' => 'string',
        'delete_status' => 'string',
        'deleted_at' => 'string',
        'dnssec' => 'string',
        'dnssec_keys' => '\Layer7\Openprovider\Model\DomainDnssecKey[]',
        'domain' => '\Layer7\Openprovider\Model\DomainDomain',
        'expiration_date' => 'string',
        'expiration_date_openprovider' => 'string',
        'hard_quarantine_expiry_date' => 'string',
        'has_history' => 'int',
        'history' => '\Layer7\Openprovider\Model\DomainHistory[]',
        'id' => 'int',
        'internal_auth_code' => 'string',
        'is_abusive' => 'bool',
        'is_client_hold_enabled' => 'string',
        'is_deleted' => 'bool',
        'is_dnssec_enabled' => 'bool',
        'is_hosted_whois' => 'bool',
        'is_lockable' => 'bool',
        'is_locked' => 'bool',
        'is_premium' => 'bool',
        'is_private_whois_allowed' => 'bool',
        'is_private_whois_enabled' => 'bool',
        'is_spamexperts_enabled' => 'bool',
        'last_changed' => 'string',
        'modify_owner_allowed' => 'int',
        'name_servers' => '\Layer7\Openprovider\Model\DomainNameserver[]',
        'ns_group' => 'string',
        'ns_template_id' => 'int',
        'ns_template_name' => 'string',
        'nsgroup_id' => 'int',
        'order_date' => 'string',
        'owner' => '\Layer7\Openprovider\Model\DomainOwner',
        'owner_company_name' => 'string',
        'owner_handle' => 'string',
        'quarantine_expiration_date' => 'string',
        'registry_expiration_date' => 'string',
        'registry_statuses' => '\Layer7\Openprovider\Model\DomainRegistryStatuses',
        'renew' => 'int',
        'renewal_date' => 'string',
        'reseller_handle' => 'string',
        'reseller_id' => 'int',
        'restorable_until' => 'string',
        'scheduled_at' => 'string',
        'scheduled_from' => 'string',
        'soft_quarantine_expiry_date' => 'string',
        'status' => 'string',
        'tech_handle' => 'string',
        'trade_allowed' => 'int',
        'trade_auth_code_required' => 'string',
        'transfer_auth_code_required' => 'string',
        'transfer_cancel_supported' => 'int',
        'type' => 'string',
        'unit' => 'string',
        'use_domicile' => 'bool',
        'verification_email_exp_date' => 'string',
        'verification_email_name' => 'string',
        'verification_email_status' => 'string',
        'verification_email_status_description' => 'string',
        'whois_privacy_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'abuse_details' => null,
        'active_date' => null,
        'additional_data' => null,
        'admin_handle' => null,
        'api_history' => null,
        'application_id' => 'int32',
        'application_mode' => null,
        'application_mode_expiration_date' => null,
        'application_mode_title' => null,
        'application_notice_id' => 'int32',
        'application_smd' => null,
        'auth_code' => null,
        'autorenew' => null,
        'billing_handle' => null,
        'can_renew' => 'int32',
        'comments' => null,
        'comments_last_changed_at' => null,
        'creation_date' => null,
        'delete_status' => null,
        'deleted_at' => null,
        'dnssec' => null,
        'dnssec_keys' => null,
        'domain' => null,
        'expiration_date' => null,
        'expiration_date_openprovider' => null,
        'hard_quarantine_expiry_date' => null,
        'has_history' => 'int32',
        'history' => null,
        'id' => 'int32',
        'internal_auth_code' => null,
        'is_abusive' => 'boolean',
        'is_client_hold_enabled' => null,
        'is_deleted' => 'boolean',
        'is_dnssec_enabled' => 'boolean',
        'is_hosted_whois' => 'boolean',
        'is_lockable' => 'boolean',
        'is_locked' => 'boolean',
        'is_premium' => 'boolean',
        'is_private_whois_allowed' => 'boolean',
        'is_private_whois_enabled' => 'boolean',
        'is_spamexperts_enabled' => 'boolean',
        'last_changed' => null,
        'modify_owner_allowed' => 'int32',
        'name_servers' => null,
        'ns_group' => null,
        'ns_template_id' => 'int32',
        'ns_template_name' => null,
        'nsgroup_id' => 'int32',
        'order_date' => null,
        'owner' => null,
        'owner_company_name' => null,
        'owner_handle' => null,
        'quarantine_expiration_date' => null,
        'registry_expiration_date' => null,
        'registry_statuses' => null,
        'renew' => 'int32',
        'renewal_date' => null,
        'reseller_handle' => null,
        'reseller_id' => 'int32',
        'restorable_until' => null,
        'scheduled_at' => null,
        'scheduled_from' => null,
        'soft_quarantine_expiry_date' => null,
        'status' => null,
        'tech_handle' => null,
        'trade_allowed' => 'int32',
        'trade_auth_code_required' => null,
        'transfer_auth_code_required' => null,
        'transfer_cancel_supported' => 'int32',
        'type' => null,
        'unit' => null,
        'use_domicile' => 'boolean',
        'verification_email_exp_date' => null,
        'verification_email_name' => null,
        'verification_email_status' => null,
        'verification_email_status_description' => null,
        'whois_privacy_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'abuse_details' => false,
        'active_date' => false,
        'additional_data' => false,
        'admin_handle' => false,
        'api_history' => false,
        'application_id' => false,
        'application_mode' => false,
        'application_mode_expiration_date' => false,
        'application_mode_title' => false,
        'application_notice_id' => false,
        'application_smd' => false,
        'auth_code' => false,
        'autorenew' => false,
        'billing_handle' => false,
        'can_renew' => false,
        'comments' => false,
        'comments_last_changed_at' => false,
        'creation_date' => false,
        'delete_status' => false,
        'deleted_at' => false,
        'dnssec' => false,
        'dnssec_keys' => false,
        'domain' => false,
        'expiration_date' => false,
        'expiration_date_openprovider' => false,
        'hard_quarantine_expiry_date' => false,
        'has_history' => false,
        'history' => false,
        'id' => false,
        'internal_auth_code' => false,
        'is_abusive' => false,
        'is_client_hold_enabled' => false,
        'is_deleted' => false,
        'is_dnssec_enabled' => false,
        'is_hosted_whois' => false,
        'is_lockable' => false,
        'is_locked' => false,
        'is_premium' => false,
        'is_private_whois_allowed' => false,
        'is_private_whois_enabled' => false,
        'is_spamexperts_enabled' => false,
        'last_changed' => false,
        'modify_owner_allowed' => false,
        'name_servers' => false,
        'ns_group' => false,
        'ns_template_id' => false,
        'ns_template_name' => false,
        'nsgroup_id' => false,
        'order_date' => false,
        'owner' => false,
        'owner_company_name' => false,
        'owner_handle' => false,
        'quarantine_expiration_date' => false,
        'registry_expiration_date' => false,
        'registry_statuses' => false,
        'renew' => false,
        'renewal_date' => false,
        'reseller_handle' => false,
        'reseller_id' => false,
        'restorable_until' => false,
        'scheduled_at' => false,
        'scheduled_from' => false,
        'soft_quarantine_expiry_date' => false,
        'status' => false,
        'tech_handle' => false,
        'trade_allowed' => false,
        'trade_auth_code_required' => false,
        'transfer_auth_code_required' => false,
        'transfer_cancel_supported' => false,
        'type' => false,
        'unit' => false,
        'use_domicile' => false,
        'verification_email_exp_date' => false,
        'verification_email_name' => false,
        'verification_email_status' => false,
        'verification_email_status_description' => false,
        'whois_privacy_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'abuse_details' => 'abuse_details',
        'active_date' => 'active_date',
        'additional_data' => 'additional_data',
        'admin_handle' => 'admin_handle',
        'api_history' => 'api_history',
        'application_id' => 'application_id',
        'application_mode' => 'application_mode',
        'application_mode_expiration_date' => 'application_mode_expiration_date',
        'application_mode_title' => 'application_mode_title',
        'application_notice_id' => 'application_notice_id',
        'application_smd' => 'application_smd',
        'auth_code' => 'auth_code',
        'autorenew' => 'autorenew',
        'billing_handle' => 'billing_handle',
        'can_renew' => 'can_renew',
        'comments' => 'comments',
        'comments_last_changed_at' => 'comments_last_changed_at',
        'creation_date' => 'creation_date',
        'delete_status' => 'delete_status',
        'deleted_at' => 'deleted_at',
        'dnssec' => 'dnssec',
        'dnssec_keys' => 'dnssec_keys',
        'domain' => 'domain',
        'expiration_date' => 'expiration_date',
        'expiration_date_openprovider' => 'expiration_date_openprovider',
        'hard_quarantine_expiry_date' => 'hard_quarantine_expiry_date',
        'has_history' => 'has_history',
        'history' => 'history',
        'id' => 'id',
        'internal_auth_code' => 'internal_auth_code',
        'is_abusive' => 'is_abusive',
        'is_client_hold_enabled' => 'is_client_hold_enabled',
        'is_deleted' => 'is_deleted',
        'is_dnssec_enabled' => 'is_dnssec_enabled',
        'is_hosted_whois' => 'is_hosted_whois',
        'is_lockable' => 'is_lockable',
        'is_locked' => 'is_locked',
        'is_premium' => 'is_premium',
        'is_private_whois_allowed' => 'is_private_whois_allowed',
        'is_private_whois_enabled' => 'is_private_whois_enabled',
        'is_spamexperts_enabled' => 'is_spamexperts_enabled',
        'last_changed' => 'last_changed',
        'modify_owner_allowed' => 'modify_owner_allowed',
        'name_servers' => 'name_servers',
        'ns_group' => 'ns_group',
        'ns_template_id' => 'ns_template_id',
        'ns_template_name' => 'ns_template_name',
        'nsgroup_id' => 'nsgroup_id',
        'order_date' => 'order_date',
        'owner' => 'owner',
        'owner_company_name' => 'owner_company_name',
        'owner_handle' => 'owner_handle',
        'quarantine_expiration_date' => 'quarantine_expiration_date',
        'registry_expiration_date' => 'registry_expiration_date',
        'registry_statuses' => 'registry_statuses',
        'renew' => 'renew',
        'renewal_date' => 'renewal_date',
        'reseller_handle' => 'reseller_handle',
        'reseller_id' => 'reseller_id',
        'restorable_until' => 'restorable_until',
        'scheduled_at' => 'scheduled_at',
        'scheduled_from' => 'scheduled_from',
        'soft_quarantine_expiry_date' => 'soft_quarantine_expiry_date',
        'status' => 'status',
        'tech_handle' => 'tech_handle',
        'trade_allowed' => 'trade_allowed',
        'trade_auth_code_required' => 'trade_auth_code_required',
        'transfer_auth_code_required' => 'transfer_auth_code_required',
        'transfer_cancel_supported' => 'transfer_cancel_supported',
        'type' => 'type',
        'unit' => 'unit',
        'use_domicile' => 'use_domicile',
        'verification_email_exp_date' => 'verification_email_exp_date',
        'verification_email_name' => 'verification_email_name',
        'verification_email_status' => 'verification_email_status',
        'verification_email_status_description' => 'verification_email_status_description',
        'whois_privacy_data' => 'whois_privacy_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'abuse_details' => 'setAbuseDetails',
        'active_date' => 'setActiveDate',
        'additional_data' => 'setAdditionalData',
        'admin_handle' => 'setAdminHandle',
        'api_history' => 'setApiHistory',
        'application_id' => 'setApplicationId',
        'application_mode' => 'setApplicationMode',
        'application_mode_expiration_date' => 'setApplicationModeExpirationDate',
        'application_mode_title' => 'setApplicationModeTitle',
        'application_notice_id' => 'setApplicationNoticeId',
        'application_smd' => 'setApplicationSmd',
        'auth_code' => 'setAuthCode',
        'autorenew' => 'setAutorenew',
        'billing_handle' => 'setBillingHandle',
        'can_renew' => 'setCanRenew',
        'comments' => 'setComments',
        'comments_last_changed_at' => 'setCommentsLastChangedAt',
        'creation_date' => 'setCreationDate',
        'delete_status' => 'setDeleteStatus',
        'deleted_at' => 'setDeletedAt',
        'dnssec' => 'setDnssec',
        'dnssec_keys' => 'setDnssecKeys',
        'domain' => 'setDomain',
        'expiration_date' => 'setExpirationDate',
        'expiration_date_openprovider' => 'setExpirationDateOpenprovider',
        'hard_quarantine_expiry_date' => 'setHardQuarantineExpiryDate',
        'has_history' => 'setHasHistory',
        'history' => 'setHistory',
        'id' => 'setId',
        'internal_auth_code' => 'setInternalAuthCode',
        'is_abusive' => 'setIsAbusive',
        'is_client_hold_enabled' => 'setIsClientHoldEnabled',
        'is_deleted' => 'setIsDeleted',
        'is_dnssec_enabled' => 'setIsDnssecEnabled',
        'is_hosted_whois' => 'setIsHostedWhois',
        'is_lockable' => 'setIsLockable',
        'is_locked' => 'setIsLocked',
        'is_premium' => 'setIsPremium',
        'is_private_whois_allowed' => 'setIsPrivateWhoisAllowed',
        'is_private_whois_enabled' => 'setIsPrivateWhoisEnabled',
        'is_spamexperts_enabled' => 'setIsSpamexpertsEnabled',
        'last_changed' => 'setLastChanged',
        'modify_owner_allowed' => 'setModifyOwnerAllowed',
        'name_servers' => 'setNameServers',
        'ns_group' => 'setNsGroup',
        'ns_template_id' => 'setNsTemplateId',
        'ns_template_name' => 'setNsTemplateName',
        'nsgroup_id' => 'setNsgroupId',
        'order_date' => 'setOrderDate',
        'owner' => 'setOwner',
        'owner_company_name' => 'setOwnerCompanyName',
        'owner_handle' => 'setOwnerHandle',
        'quarantine_expiration_date' => 'setQuarantineExpirationDate',
        'registry_expiration_date' => 'setRegistryExpirationDate',
        'registry_statuses' => 'setRegistryStatuses',
        'renew' => 'setRenew',
        'renewal_date' => 'setRenewalDate',
        'reseller_handle' => 'setResellerHandle',
        'reseller_id' => 'setResellerId',
        'restorable_until' => 'setRestorableUntil',
        'scheduled_at' => 'setScheduledAt',
        'scheduled_from' => 'setScheduledFrom',
        'soft_quarantine_expiry_date' => 'setSoftQuarantineExpiryDate',
        'status' => 'setStatus',
        'tech_handle' => 'setTechHandle',
        'trade_allowed' => 'setTradeAllowed',
        'trade_auth_code_required' => 'setTradeAuthCodeRequired',
        'transfer_auth_code_required' => 'setTransferAuthCodeRequired',
        'transfer_cancel_supported' => 'setTransferCancelSupported',
        'type' => 'setType',
        'unit' => 'setUnit',
        'use_domicile' => 'setUseDomicile',
        'verification_email_exp_date' => 'setVerificationEmailExpDate',
        'verification_email_name' => 'setVerificationEmailName',
        'verification_email_status' => 'setVerificationEmailStatus',
        'verification_email_status_description' => 'setVerificationEmailStatusDescription',
        'whois_privacy_data' => 'setWhoisPrivacyData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'abuse_details' => 'getAbuseDetails',
        'active_date' => 'getActiveDate',
        'additional_data' => 'getAdditionalData',
        'admin_handle' => 'getAdminHandle',
        'api_history' => 'getApiHistory',
        'application_id' => 'getApplicationId',
        'application_mode' => 'getApplicationMode',
        'application_mode_expiration_date' => 'getApplicationModeExpirationDate',
        'application_mode_title' => 'getApplicationModeTitle',
        'application_notice_id' => 'getApplicationNoticeId',
        'application_smd' => 'getApplicationSmd',
        'auth_code' => 'getAuthCode',
        'autorenew' => 'getAutorenew',
        'billing_handle' => 'getBillingHandle',
        'can_renew' => 'getCanRenew',
        'comments' => 'getComments',
        'comments_last_changed_at' => 'getCommentsLastChangedAt',
        'creation_date' => 'getCreationDate',
        'delete_status' => 'getDeleteStatus',
        'deleted_at' => 'getDeletedAt',
        'dnssec' => 'getDnssec',
        'dnssec_keys' => 'getDnssecKeys',
        'domain' => 'getDomain',
        'expiration_date' => 'getExpirationDate',
        'expiration_date_openprovider' => 'getExpirationDateOpenprovider',
        'hard_quarantine_expiry_date' => 'getHardQuarantineExpiryDate',
        'has_history' => 'getHasHistory',
        'history' => 'getHistory',
        'id' => 'getId',
        'internal_auth_code' => 'getInternalAuthCode',
        'is_abusive' => 'getIsAbusive',
        'is_client_hold_enabled' => 'getIsClientHoldEnabled',
        'is_deleted' => 'getIsDeleted',
        'is_dnssec_enabled' => 'getIsDnssecEnabled',
        'is_hosted_whois' => 'getIsHostedWhois',
        'is_lockable' => 'getIsLockable',
        'is_locked' => 'getIsLocked',
        'is_premium' => 'getIsPremium',
        'is_private_whois_allowed' => 'getIsPrivateWhoisAllowed',
        'is_private_whois_enabled' => 'getIsPrivateWhoisEnabled',
        'is_spamexperts_enabled' => 'getIsSpamexpertsEnabled',
        'last_changed' => 'getLastChanged',
        'modify_owner_allowed' => 'getModifyOwnerAllowed',
        'name_servers' => 'getNameServers',
        'ns_group' => 'getNsGroup',
        'ns_template_id' => 'getNsTemplateId',
        'ns_template_name' => 'getNsTemplateName',
        'nsgroup_id' => 'getNsgroupId',
        'order_date' => 'getOrderDate',
        'owner' => 'getOwner',
        'owner_company_name' => 'getOwnerCompanyName',
        'owner_handle' => 'getOwnerHandle',
        'quarantine_expiration_date' => 'getQuarantineExpirationDate',
        'registry_expiration_date' => 'getRegistryExpirationDate',
        'registry_statuses' => 'getRegistryStatuses',
        'renew' => 'getRenew',
        'renewal_date' => 'getRenewalDate',
        'reseller_handle' => 'getResellerHandle',
        'reseller_id' => 'getResellerId',
        'restorable_until' => 'getRestorableUntil',
        'scheduled_at' => 'getScheduledAt',
        'scheduled_from' => 'getScheduledFrom',
        'soft_quarantine_expiry_date' => 'getSoftQuarantineExpiryDate',
        'status' => 'getStatus',
        'tech_handle' => 'getTechHandle',
        'trade_allowed' => 'getTradeAllowed',
        'trade_auth_code_required' => 'getTradeAuthCodeRequired',
        'transfer_auth_code_required' => 'getTransferAuthCodeRequired',
        'transfer_cancel_supported' => 'getTransferCancelSupported',
        'type' => 'getType',
        'unit' => 'getUnit',
        'use_domicile' => 'getUseDomicile',
        'verification_email_exp_date' => 'getVerificationEmailExpDate',
        'verification_email_name' => 'getVerificationEmailName',
        'verification_email_status' => 'getVerificationEmailStatus',
        'verification_email_status_description' => 'getVerificationEmailStatusDescription',
        'whois_privacy_data' => 'getWhoisPrivacyData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abuse_details', $data ?? [], null);
        $this->setIfExists('active_date', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('admin_handle', $data ?? [], null);
        $this->setIfExists('api_history', $data ?? [], null);
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('application_mode', $data ?? [], null);
        $this->setIfExists('application_mode_expiration_date', $data ?? [], null);
        $this->setIfExists('application_mode_title', $data ?? [], null);
        $this->setIfExists('application_notice_id', $data ?? [], null);
        $this->setIfExists('application_smd', $data ?? [], null);
        $this->setIfExists('auth_code', $data ?? [], null);
        $this->setIfExists('autorenew', $data ?? [], null);
        $this->setIfExists('billing_handle', $data ?? [], null);
        $this->setIfExists('can_renew', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('comments_last_changed_at', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('delete_status', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('dnssec', $data ?? [], null);
        $this->setIfExists('dnssec_keys', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('expiration_date_openprovider', $data ?? [], null);
        $this->setIfExists('hard_quarantine_expiry_date', $data ?? [], null);
        $this->setIfExists('has_history', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('internal_auth_code', $data ?? [], null);
        $this->setIfExists('is_abusive', $data ?? [], null);
        $this->setIfExists('is_client_hold_enabled', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_dnssec_enabled', $data ?? [], null);
        $this->setIfExists('is_hosted_whois', $data ?? [], null);
        $this->setIfExists('is_lockable', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('is_premium', $data ?? [], null);
        $this->setIfExists('is_private_whois_allowed', $data ?? [], null);
        $this->setIfExists('is_private_whois_enabled', $data ?? [], null);
        $this->setIfExists('is_spamexperts_enabled', $data ?? [], null);
        $this->setIfExists('last_changed', $data ?? [], null);
        $this->setIfExists('modify_owner_allowed', $data ?? [], null);
        $this->setIfExists('name_servers', $data ?? [], null);
        $this->setIfExists('ns_group', $data ?? [], null);
        $this->setIfExists('ns_template_id', $data ?? [], null);
        $this->setIfExists('ns_template_name', $data ?? [], null);
        $this->setIfExists('nsgroup_id', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner_company_name', $data ?? [], null);
        $this->setIfExists('owner_handle', $data ?? [], null);
        $this->setIfExists('quarantine_expiration_date', $data ?? [], null);
        $this->setIfExists('registry_expiration_date', $data ?? [], null);
        $this->setIfExists('registry_statuses', $data ?? [], null);
        $this->setIfExists('renew', $data ?? [], null);
        $this->setIfExists('renewal_date', $data ?? [], null);
        $this->setIfExists('reseller_handle', $data ?? [], null);
        $this->setIfExists('reseller_id', $data ?? [], null);
        $this->setIfExists('restorable_until', $data ?? [], null);
        $this->setIfExists('scheduled_at', $data ?? [], null);
        $this->setIfExists('scheduled_from', $data ?? [], null);
        $this->setIfExists('soft_quarantine_expiry_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tech_handle', $data ?? [], null);
        $this->setIfExists('trade_allowed', $data ?? [], null);
        $this->setIfExists('trade_auth_code_required', $data ?? [], null);
        $this->setIfExists('transfer_auth_code_required', $data ?? [], null);
        $this->setIfExists('transfer_cancel_supported', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('use_domicile', $data ?? [], null);
        $this->setIfExists('verification_email_exp_date', $data ?? [], null);
        $this->setIfExists('verification_email_name', $data ?? [], null);
        $this->setIfExists('verification_email_status', $data ?? [], null);
        $this->setIfExists('verification_email_status_description', $data ?? [], null);
        $this->setIfExists('whois_privacy_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abuse_details
     *
     * @return \Layer7\Openprovider\Model\DomainAbuseDetails|null
     */
    public function getAbuseDetails(): ?\Layer7\Openprovider\Model\DomainAbuseDetails
    {
        return $this->container['abuse_details'];
    }

    /**
     * Sets abuse_details
     *
     * @param \Layer7\Openprovider\Model\DomainAbuseDetails|null $abuse_details abuse_details
     *
     * @return $this
     */
    public function setAbuseDetails(?\Layer7\Openprovider\Model\DomainAbuseDetails $abuse_details): static
    {
        if (is_null($abuse_details)) {
            throw new InvalidArgumentException('non-nullable abuse_details cannot be null');
        }
        $this->container['abuse_details'] = $abuse_details;

        return $this;
    }

    /**
     * Gets active_date
     *
     * @return string|null
     */
    public function getActiveDate(): ?string
    {
        return $this->container['active_date'];
    }

    /**
     * Sets active_date
     *
     * @param string|null $active_date active_date
     *
     * @return $this
     */
    public function setActiveDate(?string $active_date): static
    {
        if (is_null($active_date)) {
            throw new InvalidArgumentException('non-nullable active_date cannot be null');
        }
        $this->container['active_date'] = $active_date;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \Layer7\Openprovider\Model\DomainAdditionalData|null
     */
    public function getAdditionalData(): ?\Layer7\Openprovider\Model\DomainAdditionalData
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Layer7\Openprovider\Model\DomainAdditionalData|null $additional_data additional_data
     *
     * @return $this
     */
    public function setAdditionalData(?\Layer7\Openprovider\Model\DomainAdditionalData $additional_data): static
    {
        if (is_null($additional_data)) {
            throw new InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets admin_handle
     *
     * @return string|null
     */
    public function getAdminHandle(): ?string
    {
        return $this->container['admin_handle'];
    }

    /**
     * Sets admin_handle
     *
     * @param string|null $admin_handle admin_handle
     *
     * @return $this
     */
    public function setAdminHandle(?string $admin_handle): static
    {
        if (is_null($admin_handle)) {
            throw new InvalidArgumentException('non-nullable admin_handle cannot be null');
        }
        $this->container['admin_handle'] = $admin_handle;

        return $this;
    }

    /**
     * Gets api_history
     *
     * @return \Layer7\Openprovider\Model\DomainApiHistory[]|null
     */
    public function getApiHistory(): ?array
    {
        return $this->container['api_history'];
    }

    /**
     * Sets api_history
     *
     * @param \Layer7\Openprovider\Model\DomainApiHistory[]|null $api_history api_history
     *
     * @return $this
     */
    public function setApiHistory(?array $api_history): static
    {
        if (is_null($api_history)) {
            throw new InvalidArgumentException('non-nullable api_history cannot be null');
        }
        $this->container['api_history'] = $api_history;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return int|null
     */
    public function getApplicationId(): ?int
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param int|null $application_id application_id
     *
     * @return $this
     */
    public function setApplicationId(?int $application_id): static
    {
        if (is_null($application_id)) {
            throw new InvalidArgumentException('non-nullable application_id cannot be null');
        }
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets application_mode
     *
     * @return string|null
     */
    public function getApplicationMode(): ?string
    {
        return $this->container['application_mode'];
    }

    /**
     * Sets application_mode
     *
     * @param string|null $application_mode When new gTLD is started it gets through several phases before it becomes available for registration to everybody (General availability or GA). There are several phases before GA when it is still possible to apply for a domain, but with some restrictions.
     *
     * @return $this
     */
    public function setApplicationMode(?string $application_mode): static
    {
        if (is_null($application_mode)) {
            throw new InvalidArgumentException('non-nullable application_mode cannot be null');
        }
        $this->container['application_mode'] = $application_mode;

        return $this;
    }

    /**
     * Gets application_mode_expiration_date
     *
     * @return string|null
     */
    public function getApplicationModeExpirationDate(): ?string
    {
        return $this->container['application_mode_expiration_date'];
    }

    /**
     * Sets application_mode_expiration_date
     *
     * @param string|null $application_mode_expiration_date application_mode_expiration_date
     *
     * @return $this
     */
    public function setApplicationModeExpirationDate(?string $application_mode_expiration_date): static
    {
        if (is_null($application_mode_expiration_date)) {
            throw new InvalidArgumentException('non-nullable application_mode_expiration_date cannot be null');
        }
        $this->container['application_mode_expiration_date'] = $application_mode_expiration_date;

        return $this;
    }

    /**
     * Gets application_mode_title
     *
     * @return string|null
     */
    public function getApplicationModeTitle(): ?string
    {
        return $this->container['application_mode_title'];
    }

    /**
     * Sets application_mode_title
     *
     * @param string|null $application_mode_title application_mode_title
     *
     * @return $this
     */
    public function setApplicationModeTitle(?string $application_mode_title): static
    {
        if (is_null($application_mode_title)) {
            throw new InvalidArgumentException('non-nullable application_mode_title cannot be null');
        }
        $this->container['application_mode_title'] = $application_mode_title;

        return $this;
    }

    /**
     * Gets application_notice_id
     *
     * @return int|null
     */
    public function getApplicationNoticeId(): ?int
    {
        return $this->container['application_notice_id'];
    }

    /**
     * Sets application_notice_id
     *
     * @param int|null $application_notice_id application_notice_id
     *
     * @return $this
     */
    public function setApplicationNoticeId(?int $application_notice_id): static
    {
        if (is_null($application_notice_id)) {
            throw new InvalidArgumentException('non-nullable application_notice_id cannot be null');
        }
        $this->container['application_notice_id'] = $application_notice_id;

        return $this;
    }

    /**
     * Gets application_smd
     *
     * @return string|null
     */
    public function getApplicationSmd(): ?string
    {
        return $this->container['application_smd'];
    }

    /**
     * Sets application_smd
     *
     * @param string|null $application_smd application_smd
     *
     * @return $this
     */
    public function setApplicationSmd(?string $application_smd): static
    {
        if (is_null($application_smd)) {
            throw new InvalidArgumentException('non-nullable application_smd cannot be null');
        }
        $this->container['application_smd'] = $application_smd;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode(): ?string
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code auth_code
     *
     * @return $this
     */
    public function setAuthCode(?string $auth_code): static
    {
        if (is_null($auth_code)) {
            throw new InvalidArgumentException('non-nullable auth_code cannot be null');
        }
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return string|null
     */
    public function getAutorenew(): ?string
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param string|null $autorenew autorenew
     *
     * @return $this
     */
    public function setAutorenew(?string $autorenew): static
    {
        if (is_null($autorenew)) {
            throw new InvalidArgumentException('non-nullable autorenew cannot be null');
        }
        $this->container['autorenew'] = $autorenew;

        return $this;
    }

    /**
     * Gets billing_handle
     *
     * @return string|null
     */
    public function getBillingHandle(): ?string
    {
        return $this->container['billing_handle'];
    }

    /**
     * Sets billing_handle
     *
     * @param string|null $billing_handle billing_handle
     *
     * @return $this
     */
    public function setBillingHandle(?string $billing_handle): static
    {
        if (is_null($billing_handle)) {
            throw new InvalidArgumentException('non-nullable billing_handle cannot be null');
        }
        $this->container['billing_handle'] = $billing_handle;

        return $this;
    }

    /**
     * Gets can_renew
     *
     * @return int|null
     */
    public function getCanRenew(): ?int
    {
        return $this->container['can_renew'];
    }

    /**
     * Sets can_renew
     *
     * @param int|null $can_renew can_renew
     *
     * @return $this
     */
    public function setCanRenew(?int $can_renew): static
    {
        if (is_null($can_renew)) {
            throw new InvalidArgumentException('non-nullable can_renew cannot be null');
        }
        $this->container['can_renew'] = $can_renew;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments(): ?string
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return $this
     */
    public function setComments(?string $comments): static
    {
        if (is_null($comments)) {
            throw new InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets comments_last_changed_at
     *
     * @return string|null
     */
    public function getCommentsLastChangedAt(): ?string
    {
        return $this->container['comments_last_changed_at'];
    }

    /**
     * Sets comments_last_changed_at
     *
     * @param string|null $comments_last_changed_at comments_last_changed_at
     *
     * @return $this
     */
    public function setCommentsLastChangedAt(?string $comments_last_changed_at): static
    {
        if (is_null($comments_last_changed_at)) {
            throw new InvalidArgumentException('non-nullable comments_last_changed_at cannot be null');
        }
        $this->container['comments_last_changed_at'] = $comments_last_changed_at;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate(): ?string
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate(?string $creation_date): static
    {
        if (is_null($creation_date)) {
            throw new InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets delete_status
     *
     * @return string|null
     */
    public function getDeleteStatus(): ?string
    {
        return $this->container['delete_status'];
    }

    /**
     * Sets delete_status
     *
     * @param string|null $delete_status delete_status
     *
     * @return $this
     */
    public function setDeleteStatus(?string $delete_status): static
    {
        if (is_null($delete_status)) {
            throw new InvalidArgumentException('non-nullable delete_status cannot be null');
        }
        $this->container['delete_status'] = $delete_status;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt(): ?string
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt(?string $deleted_at): static
    {
        if (is_null($deleted_at)) {
            throw new InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return string|null
     */
    public function getDnssec(): ?string
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param string|null $dnssec dnssec
     *
     * @return $this
     */
    public function setDnssec(?string $dnssec): static
    {
        if (is_null($dnssec)) {
            throw new InvalidArgumentException('non-nullable dnssec cannot be null');
        }
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets dnssec_keys
     *
     * @return \Layer7\Openprovider\Model\DomainDnssecKey[]|null
     */
    public function getDnssecKeys(): ?array
    {
        return $this->container['dnssec_keys'];
    }

    /**
     * Sets dnssec_keys
     *
     * @param \Layer7\Openprovider\Model\DomainDnssecKey[]|null $dnssec_keys dnssec_keys
     *
     * @return $this
     */
    public function setDnssecKeys(?array $dnssec_keys): static
    {
        if (is_null($dnssec_keys)) {
            throw new InvalidArgumentException('non-nullable dnssec_keys cannot be null');
        }
        $this->container['dnssec_keys'] = $dnssec_keys;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Layer7\Openprovider\Model\DomainDomain|null
     */
    public function getDomain(): ?\Layer7\Openprovider\Model\DomainDomain
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Layer7\Openprovider\Model\DomainDomain|null $domain domain
     *
     * @return $this
     */
    public function setDomain(?\Layer7\Openprovider\Model\DomainDomain $domain): static
    {
        if (is_null($domain)) {
            throw new InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate(): ?string
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate(?string $expiration_date): static
    {
        if (is_null($expiration_date)) {
            throw new InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets expiration_date_openprovider
     *
     * @return string|null
     */
    public function getExpirationDateOpenprovider(): ?string
    {
        return $this->container['expiration_date_openprovider'];
    }

    /**
     * Sets expiration_date_openprovider
     *
     * @param string|null $expiration_date_openprovider expiration_date_openprovider
     *
     * @return $this
     */
    public function setExpirationDateOpenprovider(?string $expiration_date_openprovider): static
    {
        if (is_null($expiration_date_openprovider)) {
            throw new InvalidArgumentException('non-nullable expiration_date_openprovider cannot be null');
        }
        $this->container['expiration_date_openprovider'] = $expiration_date_openprovider;

        return $this;
    }

    /**
     * Gets hard_quarantine_expiry_date
     *
     * @return string|null
     */
    public function getHardQuarantineExpiryDate(): ?string
    {
        return $this->container['hard_quarantine_expiry_date'];
    }

    /**
     * Sets hard_quarantine_expiry_date
     *
     * @param string|null $hard_quarantine_expiry_date hard_quarantine_expiry_date
     *
     * @return $this
     */
    public function setHardQuarantineExpiryDate(?string $hard_quarantine_expiry_date): static
    {
        if (is_null($hard_quarantine_expiry_date)) {
            throw new InvalidArgumentException('non-nullable hard_quarantine_expiry_date cannot be null');
        }
        $this->container['hard_quarantine_expiry_date'] = $hard_quarantine_expiry_date;

        return $this;
    }

    /**
     * Gets has_history
     *
     * @return int|null
     */
    public function getHasHistory(): ?int
    {
        return $this->container['has_history'];
    }

    /**
     * Sets has_history
     *
     * @param int|null $has_history has_history
     *
     * @return $this
     */
    public function setHasHistory(?int $has_history): static
    {
        if (is_null($has_history)) {
            throw new InvalidArgumentException('non-nullable has_history cannot be null');
        }
        $this->container['has_history'] = $has_history;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Layer7\Openprovider\Model\DomainHistory[]|null
     */
    public function getHistory(): ?array
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Layer7\Openprovider\Model\DomainHistory[]|null $history history
     *
     * @return $this
     */
    public function setHistory(?array $history): static
    {
        if (is_null($history)) {
            throw new InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets internal_auth_code
     *
     * @return string|null
     */
    public function getInternalAuthCode(): ?string
    {
        return $this->container['internal_auth_code'];
    }

    /**
     * Sets internal_auth_code
     *
     * @param string|null $internal_auth_code internal_auth_code
     *
     * @return $this
     */
    public function setInternalAuthCode(?string $internal_auth_code): static
    {
        if (is_null($internal_auth_code)) {
            throw new InvalidArgumentException('non-nullable internal_auth_code cannot be null');
        }
        $this->container['internal_auth_code'] = $internal_auth_code;

        return $this;
    }

    /**
     * Gets is_abusive
     *
     * @return bool|null
     */
    public function getIsAbusive(): ?bool
    {
        return $this->container['is_abusive'];
    }

    /**
     * Sets is_abusive
     *
     * @param bool|null $is_abusive is_abusive
     *
     * @return $this
     */
    public function setIsAbusive(?bool $is_abusive): static
    {
        if (is_null($is_abusive)) {
            throw new InvalidArgumentException('non-nullable is_abusive cannot be null');
        }
        $this->container['is_abusive'] = $is_abusive;

        return $this;
    }

    /**
     * Gets is_client_hold_enabled
     *
     * @return string|null
     */
    public function getIsClientHoldEnabled(): ?string
    {
        return $this->container['is_client_hold_enabled'];
    }

    /**
     * Sets is_client_hold_enabled
     *
     * @param string|null $is_client_hold_enabled is_client_hold_enabled
     *
     * @return $this
     */
    public function setIsClientHoldEnabled(?string $is_client_hold_enabled): static
    {
        if (is_null($is_client_hold_enabled)) {
            throw new InvalidArgumentException('non-nullable is_client_hold_enabled cannot be null');
        }
        $this->container['is_client_hold_enabled'] = $is_client_hold_enabled;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted(): ?bool
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return $this
     */
    public function setIsDeleted(?bool $is_deleted): static
    {
        if (is_null($is_deleted)) {
            throw new InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_dnssec_enabled
     *
     * @return bool|null
     */
    public function getIsDnssecEnabled(): ?bool
    {
        return $this->container['is_dnssec_enabled'];
    }

    /**
     * Sets is_dnssec_enabled
     *
     * @param bool|null $is_dnssec_enabled is_dnssec_enabled
     *
     * @return $this
     */
    public function setIsDnssecEnabled(?bool $is_dnssec_enabled): static
    {
        if (is_null($is_dnssec_enabled)) {
            throw new InvalidArgumentException('non-nullable is_dnssec_enabled cannot be null');
        }
        $this->container['is_dnssec_enabled'] = $is_dnssec_enabled;

        return $this;
    }

    /**
     * Gets is_hosted_whois
     *
     * @return bool|null
     */
    public function getIsHostedWhois(): ?bool
    {
        return $this->container['is_hosted_whois'];
    }

    /**
     * Sets is_hosted_whois
     *
     * @param bool|null $is_hosted_whois is_hosted_whois
     *
     * @return $this
     */
    public function setIsHostedWhois(?bool $is_hosted_whois): static
    {
        if (is_null($is_hosted_whois)) {
            throw new InvalidArgumentException('non-nullable is_hosted_whois cannot be null');
        }
        $this->container['is_hosted_whois'] = $is_hosted_whois;

        return $this;
    }

    /**
     * Gets is_lockable
     *
     * @return bool|null
     */
    public function getIsLockable(): ?bool
    {
        return $this->container['is_lockable'];
    }

    /**
     * Sets is_lockable
     *
     * @param bool|null $is_lockable is_lockable
     *
     * @return $this
     */
    public function setIsLockable(?bool $is_lockable): static
    {
        if (is_null($is_lockable)) {
            throw new InvalidArgumentException('non-nullable is_lockable cannot be null');
        }
        $this->container['is_lockable'] = $is_lockable;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked(): ?bool
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked is_locked
     *
     * @return $this
     */
    public function setIsLocked(?bool $is_locked): static
    {
        if (is_null($is_locked)) {
            throw new InvalidArgumentException('non-nullable is_locked cannot be null');
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets is_premium
     *
     * @return bool|null
     */
    public function getIsPremium(): ?bool
    {
        return $this->container['is_premium'];
    }

    /**
     * Sets is_premium
     *
     * @param bool|null $is_premium is_premium
     *
     * @return $this
     */
    public function setIsPremium(?bool $is_premium): static
    {
        if (is_null($is_premium)) {
            throw new InvalidArgumentException('non-nullable is_premium cannot be null');
        }
        $this->container['is_premium'] = $is_premium;

        return $this;
    }

    /**
     * Gets is_private_whois_allowed
     *
     * @return bool|null
     */
    public function getIsPrivateWhoisAllowed(): ?bool
    {
        return $this->container['is_private_whois_allowed'];
    }

    /**
     * Sets is_private_whois_allowed
     *
     * @param bool|null $is_private_whois_allowed is_private_whois_allowed
     *
     * @return $this
     */
    public function setIsPrivateWhoisAllowed(?bool $is_private_whois_allowed): static
    {
        if (is_null($is_private_whois_allowed)) {
            throw new InvalidArgumentException('non-nullable is_private_whois_allowed cannot be null');
        }
        $this->container['is_private_whois_allowed'] = $is_private_whois_allowed;

        return $this;
    }

    /**
     * Gets is_private_whois_enabled
     *
     * @return bool|null
     */
    public function getIsPrivateWhoisEnabled(): ?bool
    {
        return $this->container['is_private_whois_enabled'];
    }

    /**
     * Sets is_private_whois_enabled
     *
     * @param bool|null $is_private_whois_enabled is_private_whois_enabled
     *
     * @return $this
     */
    public function setIsPrivateWhoisEnabled(?bool $is_private_whois_enabled): static
    {
        if (is_null($is_private_whois_enabled)) {
            throw new InvalidArgumentException('non-nullable is_private_whois_enabled cannot be null');
        }
        $this->container['is_private_whois_enabled'] = $is_private_whois_enabled;

        return $this;
    }

    /**
     * Gets is_spamexperts_enabled
     *
     * @return bool|null
     */
    public function getIsSpamexpertsEnabled(): ?bool
    {
        return $this->container['is_spamexperts_enabled'];
    }

    /**
     * Sets is_spamexperts_enabled
     *
     * @param bool|null $is_spamexperts_enabled is_spamexperts_enabled
     *
     * @return $this
     */
    public function setIsSpamexpertsEnabled(?bool $is_spamexperts_enabled): static
    {
        if (is_null($is_spamexperts_enabled)) {
            throw new InvalidArgumentException('non-nullable is_spamexperts_enabled cannot be null');
        }
        $this->container['is_spamexperts_enabled'] = $is_spamexperts_enabled;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return string|null
     */
    public function getLastChanged(): ?string
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param string|null $last_changed last_changed
     *
     * @return $this
     */
    public function setLastChanged(?string $last_changed): static
    {
        if (is_null($last_changed)) {
            throw new InvalidArgumentException('non-nullable last_changed cannot be null');
        }
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets modify_owner_allowed
     *
     * @return int|null
     */
    public function getModifyOwnerAllowed(): ?int
    {
        return $this->container['modify_owner_allowed'];
    }

    /**
     * Sets modify_owner_allowed
     *
     * @param int|null $modify_owner_allowed modify_owner_allowed
     *
     * @return $this
     */
    public function setModifyOwnerAllowed(?int $modify_owner_allowed): static
    {
        if (is_null($modify_owner_allowed)) {
            throw new InvalidArgumentException('non-nullable modify_owner_allowed cannot be null');
        }
        $this->container['modify_owner_allowed'] = $modify_owner_allowed;

        return $this;
    }

    /**
     * Gets name_servers
     *
     * @return \Layer7\Openprovider\Model\DomainNameserver[]|null
     */
    public function getNameServers(): ?array
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     *
     * @param \Layer7\Openprovider\Model\DomainNameserver[]|null $name_servers name_servers
     *
     * @return $this
     */
    public function setNameServers(?array $name_servers): static
    {
        if (is_null($name_servers)) {
            throw new InvalidArgumentException('non-nullable name_servers cannot be null');
        }
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets ns_group
     *
     * @return string|null
     */
    public function getNsGroup(): ?string
    {
        return $this->container['ns_group'];
    }

    /**
     * Sets ns_group
     *
     * @param string|null $ns_group ns_group
     *
     * @return $this
     */
    public function setNsGroup(?string $ns_group): static
    {
        if (is_null($ns_group)) {
            throw new InvalidArgumentException('non-nullable ns_group cannot be null');
        }
        $this->container['ns_group'] = $ns_group;

        return $this;
    }

    /**
     * Gets ns_template_id
     *
     * @return int|null
     */
    public function getNsTemplateId(): ?int
    {
        return $this->container['ns_template_id'];
    }

    /**
     * Sets ns_template_id
     *
     * @param int|null $ns_template_id ns_template_id
     *
     * @return $this
     */
    public function setNsTemplateId(?int $ns_template_id): static
    {
        if (is_null($ns_template_id)) {
            throw new InvalidArgumentException('non-nullable ns_template_id cannot be null');
        }
        $this->container['ns_template_id'] = $ns_template_id;

        return $this;
    }

    /**
     * Gets ns_template_name
     *
     * @return string|null
     */
    public function getNsTemplateName(): ?string
    {
        return $this->container['ns_template_name'];
    }

    /**
     * Sets ns_template_name
     *
     * @param string|null $ns_template_name ns_template_name
     *
     * @return $this
     */
    public function setNsTemplateName(?string $ns_template_name): static
    {
        if (is_null($ns_template_name)) {
            throw new InvalidArgumentException('non-nullable ns_template_name cannot be null');
        }
        $this->container['ns_template_name'] = $ns_template_name;

        return $this;
    }

    /**
     * Gets nsgroup_id
     *
     * @return int|null
     */
    public function getNsgroupId(): ?int
    {
        return $this->container['nsgroup_id'];
    }

    /**
     * Sets nsgroup_id
     *
     * @param int|null $nsgroup_id nsgroup_id
     *
     * @return $this
     */
    public function setNsgroupId(?int $nsgroup_id): static
    {
        if (is_null($nsgroup_id)) {
            throw new InvalidArgumentException('non-nullable nsgroup_id cannot be null');
        }
        $this->container['nsgroup_id'] = $nsgroup_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string|null
     */
    public function getOrderDate(): ?string
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string|null $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate(?string $order_date): static
    {
        if (is_null($order_date)) {
            throw new InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Layer7\Openprovider\Model\DomainOwner|null
     */
    public function getOwner(): ?\Layer7\Openprovider\Model\DomainOwner
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Layer7\Openprovider\Model\DomainOwner|null $owner owner
     *
     * @return $this
     */
    public function setOwner(?\Layer7\Openprovider\Model\DomainOwner $owner): static
    {
        if (is_null($owner)) {
            throw new InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_company_name
     *
     * @return string|null
     */
    public function getOwnerCompanyName(): ?string
    {
        return $this->container['owner_company_name'];
    }

    /**
     * Sets owner_company_name
     *
     * @param string|null $owner_company_name owner_company_name
     *
     * @return $this
     */
    public function setOwnerCompanyName(?string $owner_company_name): static
    {
        if (is_null($owner_company_name)) {
            throw new InvalidArgumentException('non-nullable owner_company_name cannot be null');
        }
        $this->container['owner_company_name'] = $owner_company_name;

        return $this;
    }

    /**
     * Gets owner_handle
     *
     * @return string|null
     */
    public function getOwnerHandle(): ?string
    {
        return $this->container['owner_handle'];
    }

    /**
     * Sets owner_handle
     *
     * @param string|null $owner_handle owner_handle
     *
     * @return $this
     */
    public function setOwnerHandle(?string $owner_handle): static
    {
        if (is_null($owner_handle)) {
            throw new InvalidArgumentException('non-nullable owner_handle cannot be null');
        }
        $this->container['owner_handle'] = $owner_handle;

        return $this;
    }

    /**
     * Gets quarantine_expiration_date
     *
     * @return string|null
     */
    public function getQuarantineExpirationDate(): ?string
    {
        return $this->container['quarantine_expiration_date'];
    }

    /**
     * Sets quarantine_expiration_date
     *
     * @param string|null $quarantine_expiration_date quarantine_expiration_date
     *
     * @return $this
     */
    public function setQuarantineExpirationDate(?string $quarantine_expiration_date): static
    {
        if (is_null($quarantine_expiration_date)) {
            throw new InvalidArgumentException('non-nullable quarantine_expiration_date cannot be null');
        }
        $this->container['quarantine_expiration_date'] = $quarantine_expiration_date;

        return $this;
    }

    /**
     * Gets registry_expiration_date
     *
     * @return string|null
     */
    public function getRegistryExpirationDate(): ?string
    {
        return $this->container['registry_expiration_date'];
    }

    /**
     * Sets registry_expiration_date
     *
     * @param string|null $registry_expiration_date registry_expiration_date
     *
     * @return $this
     */
    public function setRegistryExpirationDate(?string $registry_expiration_date): static
    {
        if (is_null($registry_expiration_date)) {
            throw new InvalidArgumentException('non-nullable registry_expiration_date cannot be null');
        }
        $this->container['registry_expiration_date'] = $registry_expiration_date;

        return $this;
    }

    /**
     * Gets registry_statuses
     *
     * @return \Layer7\Openprovider\Model\DomainRegistryStatuses|null
     */
    public function getRegistryStatuses(): ?\Layer7\Openprovider\Model\DomainRegistryStatuses
    {
        return $this->container['registry_statuses'];
    }

    /**
     * Sets registry_statuses
     *
     * @param \Layer7\Openprovider\Model\DomainRegistryStatuses|null $registry_statuses registry_statuses
     *
     * @return $this
     */
    public function setRegistryStatuses(?\Layer7\Openprovider\Model\DomainRegistryStatuses $registry_statuses): static
    {
        if (is_null($registry_statuses)) {
            throw new InvalidArgumentException('non-nullable registry_statuses cannot be null');
        }
        $this->container['registry_statuses'] = $registry_statuses;

        return $this;
    }

    /**
     * Gets renew
     *
     * @return int|null
     */
    public function getRenew(): ?int
    {
        return $this->container['renew'];
    }

    /**
     * Sets renew
     *
     * @param int|null $renew renew
     *
     * @return $this
     */
    public function setRenew(?int $renew): static
    {
        if (is_null($renew)) {
            throw new InvalidArgumentException('non-nullable renew cannot be null');
        }
        $this->container['renew'] = $renew;

        return $this;
    }

    /**
     * Gets renewal_date
     *
     * @return string|null
     */
    public function getRenewalDate(): ?string
    {
        return $this->container['renewal_date'];
    }

    /**
     * Sets renewal_date
     *
     * @param string|null $renewal_date renewal_date
     *
     * @return $this
     */
    public function setRenewalDate(?string $renewal_date): static
    {
        if (is_null($renewal_date)) {
            throw new InvalidArgumentException('non-nullable renewal_date cannot be null');
        }
        $this->container['renewal_date'] = $renewal_date;

        return $this;
    }

    /**
     * Gets reseller_handle
     *
     * @return string|null
     */
    public function getResellerHandle(): ?string
    {
        return $this->container['reseller_handle'];
    }

    /**
     * Sets reseller_handle
     *
     * @param string|null $reseller_handle reseller_handle
     *
     * @return $this
     */
    public function setResellerHandle(?string $reseller_handle): static
    {
        if (is_null($reseller_handle)) {
            throw new InvalidArgumentException('non-nullable reseller_handle cannot be null');
        }
        $this->container['reseller_handle'] = $reseller_handle;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return int|null
     */
    public function getResellerId(): ?int
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param int|null $reseller_id reseller_id
     *
     * @return $this
     */
    public function setResellerId(?int $reseller_id): static
    {
        if (is_null($reseller_id)) {
            throw new InvalidArgumentException('non-nullable reseller_id cannot be null');
        }
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets restorable_until
     *
     * @return string|null
     */
    public function getRestorableUntil(): ?string
    {
        return $this->container['restorable_until'];
    }

    /**
     * Sets restorable_until
     *
     * @param string|null $restorable_until restorable_until
     *
     * @return $this
     */
    public function setRestorableUntil(?string $restorable_until): static
    {
        if (is_null($restorable_until)) {
            throw new InvalidArgumentException('non-nullable restorable_until cannot be null');
        }
        $this->container['restorable_until'] = $restorable_until;

        return $this;
    }

    /**
     * Gets scheduled_at
     *
     * @return string|null
     */
    public function getScheduledAt(): ?string
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     *
     * @param string|null $scheduled_at scheduled_at
     *
     * @return $this
     */
    public function setScheduledAt(?string $scheduled_at): static
    {
        if (is_null($scheduled_at)) {
            throw new InvalidArgumentException('non-nullable scheduled_at cannot be null');
        }
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets scheduled_from
     *
     * @return string|null
     */
    public function getScheduledFrom(): ?string
    {
        return $this->container['scheduled_from'];
    }

    /**
     * Sets scheduled_from
     *
     * @param string|null $scheduled_from scheduled_from
     *
     * @return $this
     */
    public function setScheduledFrom(?string $scheduled_from): static
    {
        if (is_null($scheduled_from)) {
            throw new InvalidArgumentException('non-nullable scheduled_from cannot be null');
        }
        $this->container['scheduled_from'] = $scheduled_from;

        return $this;
    }

    /**
     * Gets soft_quarantine_expiry_date
     *
     * @return string|null
     */
    public function getSoftQuarantineExpiryDate(): ?string
    {
        return $this->container['soft_quarantine_expiry_date'];
    }

    /**
     * Sets soft_quarantine_expiry_date
     *
     * @param string|null $soft_quarantine_expiry_date soft_quarantine_expiry_date
     *
     * @return $this
     */
    public function setSoftQuarantineExpiryDate(?string $soft_quarantine_expiry_date): static
    {
        if (is_null($soft_quarantine_expiry_date)) {
            throw new InvalidArgumentException('non-nullable soft_quarantine_expiry_date cannot be null');
        }
        $this->container['soft_quarantine_expiry_date'] = $soft_quarantine_expiry_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tech_handle
     *
     * @return string|null
     */
    public function getTechHandle(): ?string
    {
        return $this->container['tech_handle'];
    }

    /**
     * Sets tech_handle
     *
     * @param string|null $tech_handle tech_handle
     *
     * @return $this
     */
    public function setTechHandle(?string $tech_handle): static
    {
        if (is_null($tech_handle)) {
            throw new InvalidArgumentException('non-nullable tech_handle cannot be null');
        }
        $this->container['tech_handle'] = $tech_handle;

        return $this;
    }

    /**
     * Gets trade_allowed
     *
     * @return int|null
     */
    public function getTradeAllowed(): ?int
    {
        return $this->container['trade_allowed'];
    }

    /**
     * Sets trade_allowed
     *
     * @param int|null $trade_allowed trade_allowed
     *
     * @return $this
     */
    public function setTradeAllowed(?int $trade_allowed): static
    {
        if (is_null($trade_allowed)) {
            throw new InvalidArgumentException('non-nullable trade_allowed cannot be null');
        }
        $this->container['trade_allowed'] = $trade_allowed;

        return $this;
    }

    /**
     * Gets trade_auth_code_required
     *
     * @return string|null
     */
    public function getTradeAuthCodeRequired(): ?string
    {
        return $this->container['trade_auth_code_required'];
    }

    /**
     * Sets trade_auth_code_required
     *
     * @param string|null $trade_auth_code_required trade_auth_code_required
     *
     * @return $this
     */
    public function setTradeAuthCodeRequired(?string $trade_auth_code_required): static
    {
        if (is_null($trade_auth_code_required)) {
            throw new InvalidArgumentException('non-nullable trade_auth_code_required cannot be null');
        }
        $this->container['trade_auth_code_required'] = $trade_auth_code_required;

        return $this;
    }

    /**
     * Gets transfer_auth_code_required
     *
     * @return string|null
     */
    public function getTransferAuthCodeRequired(): ?string
    {
        return $this->container['transfer_auth_code_required'];
    }

    /**
     * Sets transfer_auth_code_required
     *
     * @param string|null $transfer_auth_code_required transfer_auth_code_required
     *
     * @return $this
     */
    public function setTransferAuthCodeRequired(?string $transfer_auth_code_required): static
    {
        if (is_null($transfer_auth_code_required)) {
            throw new InvalidArgumentException('non-nullable transfer_auth_code_required cannot be null');
        }
        $this->container['transfer_auth_code_required'] = $transfer_auth_code_required;

        return $this;
    }

    /**
     * Gets transfer_cancel_supported
     *
     * @return int|null
     */
    public function getTransferCancelSupported(): ?int
    {
        return $this->container['transfer_cancel_supported'];
    }

    /**
     * Sets transfer_cancel_supported
     *
     * @param int|null $transfer_cancel_supported transfer_cancel_supported
     *
     * @return $this
     */
    public function setTransferCancelSupported(?int $transfer_cancel_supported): static
    {
        if (is_null($transfer_cancel_supported)) {
            throw new InvalidArgumentException('non-nullable transfer_cancel_supported cannot be null');
        }
        $this->container['transfer_cancel_supported'] = $transfer_cancel_supported;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit(): ?string
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    public function setUnit(?string $unit): static
    {
        if (is_null($unit)) {
            throw new InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets use_domicile
     *
     * @return bool|null
     */
    public function getUseDomicile(): ?bool
    {
        return $this->container['use_domicile'];
    }

    /**
     * Sets use_domicile
     *
     * @param bool|null $use_domicile use_domicile
     *
     * @return $this
     */
    public function setUseDomicile(?bool $use_domicile): static
    {
        if (is_null($use_domicile)) {
            throw new InvalidArgumentException('non-nullable use_domicile cannot be null');
        }
        $this->container['use_domicile'] = $use_domicile;

        return $this;
    }

    /**
     * Gets verification_email_exp_date
     *
     * @return string|null
     */
    public function getVerificationEmailExpDate(): ?string
    {
        return $this->container['verification_email_exp_date'];
    }

    /**
     * Sets verification_email_exp_date
     *
     * @param string|null $verification_email_exp_date verification_email_exp_date
     *
     * @return $this
     */
    public function setVerificationEmailExpDate(?string $verification_email_exp_date): static
    {
        if (is_null($verification_email_exp_date)) {
            throw new InvalidArgumentException('non-nullable verification_email_exp_date cannot be null');
        }
        $this->container['verification_email_exp_date'] = $verification_email_exp_date;

        return $this;
    }

    /**
     * Gets verification_email_name
     *
     * @return string|null
     */
    public function getVerificationEmailName(): ?string
    {
        return $this->container['verification_email_name'];
    }

    /**
     * Sets verification_email_name
     *
     * @param string|null $verification_email_name verification_email_name
     *
     * @return $this
     */
    public function setVerificationEmailName(?string $verification_email_name): static
    {
        if (is_null($verification_email_name)) {
            throw new InvalidArgumentException('non-nullable verification_email_name cannot be null');
        }
        $this->container['verification_email_name'] = $verification_email_name;

        return $this;
    }

    /**
     * Gets verification_email_status
     *
     * @return string|null
     */
    public function getVerificationEmailStatus(): ?string
    {
        return $this->container['verification_email_status'];
    }

    /**
     * Sets verification_email_status
     *
     * @param string|null $verification_email_status verification_email_status
     *
     * @return $this
     */
    public function setVerificationEmailStatus(?string $verification_email_status): static
    {
        if (is_null($verification_email_status)) {
            throw new InvalidArgumentException('non-nullable verification_email_status cannot be null');
        }
        $this->container['verification_email_status'] = $verification_email_status;

        return $this;
    }

    /**
     * Gets verification_email_status_description
     *
     * @return string|null
     */
    public function getVerificationEmailStatusDescription(): ?string
    {
        return $this->container['verification_email_status_description'];
    }

    /**
     * Sets verification_email_status_description
     *
     * @param string|null $verification_email_status_description verification_email_status_description
     *
     * @return $this
     */
    public function setVerificationEmailStatusDescription(?string $verification_email_status_description): static
    {
        if (is_null($verification_email_status_description)) {
            throw new InvalidArgumentException('non-nullable verification_email_status_description cannot be null');
        }
        $this->container['verification_email_status_description'] = $verification_email_status_description;

        return $this;
    }

    /**
     * Gets whois_privacy_data
     *
     * @return string|null
     */
    public function getWhoisPrivacyData(): ?string
    {
        return $this->container['whois_privacy_data'];
    }

    /**
     * Sets whois_privacy_data
     *
     * @param string|null $whois_privacy_data whois_privacy_data
     *
     * @return $this
     */
    public function setWhoisPrivacyData(?string $whois_privacy_data): static
    {
        if (is_null($whois_privacy_data)) {
            throw new InvalidArgumentException('non-nullable whois_privacy_data cannot be null');
        }
        $this->container['whois_privacy_data'] = $whois_privacy_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


