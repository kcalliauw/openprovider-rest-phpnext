<?php
/**
 * OrderReissueOrderRequest
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * OrderReissueOrderRequest Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderReissueOrderRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'orderReissueOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'approver_email' => 'string',
        'csr' => 'string',
        'domain_validation_methods' => '\Layer7\Openprovider\Model\OrderSslOrderDomainValidationMethods[]',
        'host_names' => 'string[]',
        'id' => 'int',
        'organization_handle' => 'string',
        'signature_hash_algorithm' => 'string',
        'software_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'approver_email' => null,
        'csr' => null,
        'domain_validation_methods' => null,
        'host_names' => null,
        'id' => 'int32',
        'organization_handle' => null,
        'signature_hash_algorithm' => null,
        'software_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'approver_email' => false,
        'csr' => false,
        'domain_validation_methods' => false,
        'host_names' => false,
        'id' => false,
        'organization_handle' => false,
        'signature_hash_algorithm' => false,
        'software_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'approver_email' => 'approver_email',
        'csr' => 'csr',
        'domain_validation_methods' => 'domain_validation_methods',
        'host_names' => 'host_names',
        'id' => 'id',
        'organization_handle' => 'organization_handle',
        'signature_hash_algorithm' => 'signature_hash_algorithm',
        'software_id' => 'software_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'approver_email' => 'setApproverEmail',
        'csr' => 'setCsr',
        'domain_validation_methods' => 'setDomainValidationMethods',
        'host_names' => 'setHostNames',
        'id' => 'setId',
        'organization_handle' => 'setOrganizationHandle',
        'signature_hash_algorithm' => 'setSignatureHashAlgorithm',
        'software_id' => 'setSoftwareId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'approver_email' => 'getApproverEmail',
        'csr' => 'getCsr',
        'domain_validation_methods' => 'getDomainValidationMethods',
        'host_names' => 'getHostNames',
        'id' => 'getId',
        'organization_handle' => 'getOrganizationHandle',
        'signature_hash_algorithm' => 'getSignatureHashAlgorithm',
        'software_id' => 'getSoftwareId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('approver_email', $data ?? [], null);
        $this->setIfExists('csr', $data ?? [], null);
        $this->setIfExists('domain_validation_methods', $data ?? [], null);
        $this->setIfExists('host_names', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('organization_handle', $data ?? [], null);
        $this->setIfExists('signature_hash_algorithm', $data ?? [], null);
        $this->setIfExists('software_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approver_email
     *
     * @return string|null
     */
    public function getApproverEmail(): ?string
    {
        return $this->container['approver_email'];
    }

    /**
     * Sets approver_email
     *
     * @param string|null $approver_email Email for domain ownership verification. Should start with well-known generic name like admin@, hostmater@, administrator@, etc.
     *
     * @return $this
     */
    public function setApproverEmail(?string $approver_email): static
    {
        if (is_null($approver_email)) {
            throw new InvalidArgumentException('non-nullable approver_email cannot be null');
        }
        $this->container['approver_email'] = $approver_email;

        return $this;
    }

    /**
     * Gets csr
     *
     * @return string|null
     */
    public function getCsr(): ?string
    {
        return $this->container['csr'];
    }

    /**
     * Sets csr
     *
     * @param string|null $csr csr
     *
     * @return $this
     */
    public function setCsr(?string $csr): static
    {
        if (is_null($csr)) {
            throw new InvalidArgumentException('non-nullable csr cannot be null');
        }
        $this->container['csr'] = $csr;

        return $this;
    }

    /**
     * Gets domain_validation_methods
     *
     * @return \Layer7\Openprovider\Model\OrderSslOrderDomainValidationMethods[]|null
     */
    public function getDomainValidationMethods(): ?array
    {
        return $this->container['domain_validation_methods'];
    }

    /**
     * Sets domain_validation_methods
     *
     * @param \Layer7\Openprovider\Model\OrderSslOrderDomainValidationMethods[]|null $domain_validation_methods domain_validation_methods
     *
     * @return $this
     */
    public function setDomainValidationMethods(?array $domain_validation_methods): static
    {
        if (is_null($domain_validation_methods)) {
            throw new InvalidArgumentException('non-nullable domain_validation_methods cannot be null');
        }
        $this->container['domain_validation_methods'] = $domain_validation_methods;

        return $this;
    }

    /**
     * Gets host_names
     *
     * @return string[]|null
     */
    public function getHostNames(): ?array
    {
        return $this->container['host_names'];
    }

    /**
     * Sets host_names
     *
     * @param string[]|null $host_names host_names
     *
     * @return $this
     */
    public function setHostNames(?array $host_names): static
    {
        if (is_null($host_names)) {
            throw new InvalidArgumentException('non-nullable host_names cannot be null');
        }
        $this->container['host_names'] = $host_names;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_handle
     *
     * @return string|null
     */
    public function getOrganizationHandle(): ?string
    {
        return $this->container['organization_handle'];
    }

    /**
     * Sets organization_handle
     *
     * @param string|null $organization_handle organization_handle
     *
     * @return $this
     */
    public function setOrganizationHandle(?string $organization_handle): static
    {
        if (is_null($organization_handle)) {
            throw new InvalidArgumentException('non-nullable organization_handle cannot be null');
        }
        $this->container['organization_handle'] = $organization_handle;

        return $this;
    }

    /**
     * Gets signature_hash_algorithm
     *
     * @return string|null
     */
    public function getSignatureHashAlgorithm(): ?string
    {
        return $this->container['signature_hash_algorithm'];
    }

    /**
     * Sets signature_hash_algorithm
     *
     * @param string|null $signature_hash_algorithm signature_hash_algorithm
     *
     * @return $this
     */
    public function setSignatureHashAlgorithm(?string $signature_hash_algorithm): static
    {
        if (is_null($signature_hash_algorithm)) {
            throw new InvalidArgumentException('non-nullable signature_hash_algorithm cannot be null');
        }
        $this->container['signature_hash_algorithm'] = $signature_hash_algorithm;

        return $this;
    }

    /**
     * Gets software_id
     *
     * @return string|null
     */
    public function getSoftwareId(): ?string
    {
        return $this->container['software_id'];
    }

    /**
     * Sets software_id
     *
     * @param string|null $software_id software_id
     *
     * @return $this
     */
    public function setSoftwareId(?string $software_id): static
    {
        if (is_null($software_id)) {
            throw new InvalidArgumentException('non-nullable software_id cannot be null');
        }
        $this->container['software_id'] = $software_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


