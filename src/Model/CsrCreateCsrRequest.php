<?php
/**
 * CsrCreateCsrRequest
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * CsrCreateCsrRequest Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CsrCreateCsrRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'csrCreateCsrRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bits' => 'int',
        'common_name' => 'string',
        'country' => 'string',
        'email' => 'string',
        'locality' => 'string',
        'organization' => 'string',
        'signature_hash_algorithm' => 'string',
        'state' => 'string',
        'subject_alternative_name' => 'string[]',
        'unit' => 'string',
        'with_config' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bits' => 'int32',
        'common_name' => null,
        'country' => null,
        'email' => null,
        'locality' => null,
        'organization' => null,
        'signature_hash_algorithm' => null,
        'state' => null,
        'subject_alternative_name' => null,
        'unit' => null,
        'with_config' => 'boolean'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bits' => false,
        'common_name' => false,
        'country' => false,
        'email' => false,
        'locality' => false,
        'organization' => false,
        'signature_hash_algorithm' => false,
        'state' => false,
        'subject_alternative_name' => false,
        'unit' => false,
        'with_config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bits' => 'bits',
        'common_name' => 'common_name',
        'country' => 'country',
        'email' => 'email',
        'locality' => 'locality',
        'organization' => 'organization',
        'signature_hash_algorithm' => 'signature_hash_algorithm',
        'state' => 'state',
        'subject_alternative_name' => 'subject_alternative_name',
        'unit' => 'unit',
        'with_config' => 'with_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bits' => 'setBits',
        'common_name' => 'setCommonName',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'locality' => 'setLocality',
        'organization' => 'setOrganization',
        'signature_hash_algorithm' => 'setSignatureHashAlgorithm',
        'state' => 'setState',
        'subject_alternative_name' => 'setSubjectAlternativeName',
        'unit' => 'setUnit',
        'with_config' => 'setWithConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bits' => 'getBits',
        'common_name' => 'getCommonName',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'locality' => 'getLocality',
        'organization' => 'getOrganization',
        'signature_hash_algorithm' => 'getSignatureHashAlgorithm',
        'state' => 'getState',
        'subject_alternative_name' => 'getSubjectAlternativeName',
        'unit' => 'getUnit',
        'with_config' => 'getWithConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bits', $data ?? [], null);
        $this->setIfExists('common_name', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('locality', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('signature_hash_algorithm', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('subject_alternative_name', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('with_config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bits
     *
     * @return int|null
     */
    public function getBits(): ?int
    {
        return $this->container['bits'];
    }

    /**
     * Sets bits
     *
     * @param int|null $bits bits
     *
     * @return $this
     */
    public function setBits(?int $bits): static
    {
        if (is_null($bits)) {
            throw new InvalidArgumentException('non-nullable bits cannot be null');
        }
        $this->container['bits'] = $bits;

        return $this;
    }

    /**
     * Gets common_name
     *
     * @return string|null
     */
    public function getCommonName(): ?string
    {
        return $this->container['common_name'];
    }

    /**
     * Sets common_name
     *
     * @param string|null $common_name common_name
     *
     * @return $this
     */
    public function setCommonName(?string $common_name): static
    {
        if (is_null($common_name)) {
            throw new InvalidArgumentException('non-nullable common_name cannot be null');
        }
        $this->container['common_name'] = $common_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry(): ?string
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return $this
     */
    public function setCountry(?string $country): static
    {
        if (is_null($country)) {
            throw new InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail(): ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail(?string $email): static
    {
        if (is_null($email)) {
            throw new InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality(): ?string
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality locality
     *
     * @return $this
     */
    public function setLocality(?string $locality): static
    {
        if (is_null($locality)) {
            throw new InvalidArgumentException('non-nullable locality cannot be null');
        }
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization(): ?string
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return $this
     */
    public function setOrganization(?string $organization): static
    {
        if (is_null($organization)) {
            throw new InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets signature_hash_algorithm
     *
     * @return string|null
     */
    public function getSignatureHashAlgorithm(): ?string
    {
        return $this->container['signature_hash_algorithm'];
    }

    /**
     * Sets signature_hash_algorithm
     *
     * @param string|null $signature_hash_algorithm Redundant field, can be used as 'sha2'.
     *
     * @return $this
     */
    public function setSignatureHashAlgorithm(?string $signature_hash_algorithm): static
    {
        if (is_null($signature_hash_algorithm)) {
            throw new InvalidArgumentException('non-nullable signature_hash_algorithm cannot be null');
        }
        $this->container['signature_hash_algorithm'] = $signature_hash_algorithm;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState(): ?string
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState(?string $state): static
    {
        if (is_null($state)) {
            throw new InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subject_alternative_name
     *
     * @return string[]|null
     */
    public function getSubjectAlternativeName(): ?array
    {
        return $this->container['subject_alternative_name'];
    }

    /**
     * Sets subject_alternative_name
     *
     * @param string[]|null $subject_alternative_name subject_alternative_name
     *
     * @return $this
     */
    public function setSubjectAlternativeName(?array $subject_alternative_name): static
    {
        if (is_null($subject_alternative_name)) {
            throw new InvalidArgumentException('non-nullable subject_alternative_name cannot be null');
        }
        $this->container['subject_alternative_name'] = $subject_alternative_name;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit(): ?string
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return $this
     */
    public function setUnit(?string $unit): static
    {
        if (is_null($unit)) {
            throw new InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets with_config
     *
     * @return bool|null
     */
    public function getWithConfig(): ?bool
    {
        return $this->container['with_config'];
    }

    /**
     * Sets with_config
     *
     * @param bool|null $with_config with_config
     *
     * @return $this
     */
    public function setWithConfig(?bool $with_config): static
    {
        if (is_null($with_config)) {
            throw new InvalidArgumentException('non-nullable with_config cannot be null');
        }
        $this->container['with_config'] = $with_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


