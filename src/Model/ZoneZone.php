<?php
/**
 * ZoneZone
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * ZoneZone Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ZoneZone implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'zoneZone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'active' => 'int',
        'creation_date' => 'string',
        'dnskey' => 'string',
        'history' => '\Layer7\Openprovider\Model\HistoryZoneHistory[]',
        'id' => 'int',
        'ip' => 'string',
        'is_deleted' => 'bool',
        'is_shadow' => 'bool',
        'is_spamexperts_enabled' => 'bool',
        'modification_date' => 'string',
        'name' => 'string',
        'records' => '\Layer7\Openprovider\Model\RecordZoneRecord[]',
        'reseller_id' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'active' => 'int32',
        'creation_date' => null,
        'dnskey' => null,
        'history' => null,
        'id' => 'int32',
        'ip' => null,
        'is_deleted' => 'boolean',
        'is_shadow' => 'boolean',
        'is_spamexperts_enabled' => 'boolean',
        'modification_date' => null,
        'name' => null,
        'records' => null,
        'reseller_id' => 'int32',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'active' => false,
        'creation_date' => false,
        'dnskey' => false,
        'history' => false,
        'id' => false,
        'ip' => false,
        'is_deleted' => false,
        'is_shadow' => false,
        'is_spamexperts_enabled' => false,
        'modification_date' => false,
        'name' => false,
        'records' => false,
        'reseller_id' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'active' => 'active',
        'creation_date' => 'creation_date',
        'dnskey' => 'dnskey',
        'history' => 'history',
        'id' => 'id',
        'ip' => 'ip',
        'is_deleted' => 'is_deleted',
        'is_shadow' => 'is_shadow',
        'is_spamexperts_enabled' => 'is_spamexperts_enabled',
        'modification_date' => 'modification_date',
        'name' => 'name',
        'records' => 'records',
        'reseller_id' => 'reseller_id',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'active' => 'setActive',
        'creation_date' => 'setCreationDate',
        'dnskey' => 'setDnskey',
        'history' => 'setHistory',
        'id' => 'setId',
        'ip' => 'setIp',
        'is_deleted' => 'setIsDeleted',
        'is_shadow' => 'setIsShadow',
        'is_spamexperts_enabled' => 'setIsSpamexpertsEnabled',
        'modification_date' => 'setModificationDate',
        'name' => 'setName',
        'records' => 'setRecords',
        'reseller_id' => 'setResellerId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'active' => 'getActive',
        'creation_date' => 'getCreationDate',
        'dnskey' => 'getDnskey',
        'history' => 'getHistory',
        'id' => 'getId',
        'ip' => 'getIp',
        'is_deleted' => 'getIsDeleted',
        'is_shadow' => 'getIsShadow',
        'is_spamexperts_enabled' => 'getIsSpamexpertsEnabled',
        'modification_date' => 'getModificationDate',
        'name' => 'getName',
        'records' => 'getRecords',
        'reseller_id' => 'getResellerId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('dnskey', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_shadow', $data ?? [], null);
        $this->setIfExists('is_spamexperts_enabled', $data ?? [], null);
        $this->setIfExists('modification_date', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('records', $data ?? [], null);
        $this->setIfExists('reseller_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return int|null
     */
    public function getActive(): ?int
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int|null $active active
     *
     * @return $this
     */
    public function setActive(?int $active): static
    {
        if (is_null($active)) {
            throw new InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate(): ?string
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate(?string $creation_date): static
    {
        if (is_null($creation_date)) {
            throw new InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets dnskey
     *
     * @return string|null
     */
    public function getDnskey(): ?string
    {
        return $this->container['dnskey'];
    }

    /**
     * Sets dnskey
     *
     * @param string|null $dnskey dnskey
     *
     * @return $this
     */
    public function setDnskey(?string $dnskey): static
    {
        if (is_null($dnskey)) {
            throw new InvalidArgumentException('non-nullable dnskey cannot be null');
        }
        $this->container['dnskey'] = $dnskey;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Layer7\Openprovider\Model\HistoryZoneHistory[]|null
     */
    public function getHistory(): ?array
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Layer7\Openprovider\Model\HistoryZoneHistory[]|null $history history
     *
     * @return $this
     */
    public function setHistory(?array $history): static
    {
        if (is_null($history)) {
            throw new InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp(): ?string
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return $this
     */
    public function setIp(?string $ip): static
    {
        if (is_null($ip)) {
            throw new InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted(): ?bool
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return $this
     */
    public function setIsDeleted(?bool $is_deleted): static
    {
        if (is_null($is_deleted)) {
            throw new InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_shadow
     *
     * @return bool|null
     */
    public function getIsShadow(): ?bool
    {
        return $this->container['is_shadow'];
    }

    /**
     * Sets is_shadow
     *
     * @param bool|null $is_shadow is_shadow
     *
     * @return $this
     */
    public function setIsShadow(?bool $is_shadow): static
    {
        if (is_null($is_shadow)) {
            throw new InvalidArgumentException('non-nullable is_shadow cannot be null');
        }
        $this->container['is_shadow'] = $is_shadow;

        return $this;
    }

    /**
     * Gets is_spamexperts_enabled
     *
     * @return bool|null
     */
    public function getIsSpamexpertsEnabled(): ?bool
    {
        return $this->container['is_spamexperts_enabled'];
    }

    /**
     * Sets is_spamexperts_enabled
     *
     * @param bool|null $is_spamexperts_enabled is_spamexperts_enabled
     *
     * @return $this
     */
    public function setIsSpamexpertsEnabled(?bool $is_spamexperts_enabled): static
    {
        if (is_null($is_spamexperts_enabled)) {
            throw new InvalidArgumentException('non-nullable is_spamexperts_enabled cannot be null');
        }
        $this->container['is_spamexperts_enabled'] = $is_spamexperts_enabled;

        return $this;
    }

    /**
     * Gets modification_date
     *
     * @return string|null
     */
    public function getModificationDate(): ?string
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     *
     * @param string|null $modification_date modification_date
     *
     * @return $this
     */
    public function setModificationDate(?string $modification_date): static
    {
        if (is_null($modification_date)) {
            throw new InvalidArgumentException('non-nullable modification_date cannot be null');
        }
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets records
     *
     * @return \Layer7\Openprovider\Model\RecordZoneRecord[]|null
     */
    public function getRecords(): ?array
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Layer7\Openprovider\Model\RecordZoneRecord[]|null $records records
     *
     * @return $this
     */
    public function setRecords(?array $records): static
    {
        if (is_null($records)) {
            throw new InvalidArgumentException('non-nullable records cannot be null');
        }
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return int|null
     */
    public function getResellerId(): ?int
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param int|null $reseller_id reseller_id
     *
     * @return $this
     */
    public function setResellerId(?int $reseller_id): static
    {
        if (is_null($reseller_id)) {
            throw new InvalidArgumentException('non-nullable reseller_id cannot be null');
        }
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


