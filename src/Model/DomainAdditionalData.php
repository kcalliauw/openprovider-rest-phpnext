<?php
/**
 * DomainAdditionalData
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * DomainAdditionalData Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DomainAdditionalData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'domainAdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'abogado_acceptance' => 'string',
        'admin_sing_pass_id' => 'string',
        'allocation_token' => 'string',
        'bank_acceptance' => 'string',
        'company_registration_number' => 'string',
        'domain_name_variants' => 'string',
        'eligibility_type' => 'string',
        'eligibility_type_relationship' => 'string',
        'ftld_token' => 'string',
        'id_number' => 'string',
        'id_type' => 'string',
        'idn_script' => 'string',
        'insurance_acceptance' => 'string',
        'intended_use' => 'string',
        'law_acceptance' => 'string',
        'legal_type' => 'string',
        'maintainer' => 'string',
        'membership_id' => 'string',
        'mobile_phone_number_verification' => 'string',
        'ngo_ong_eligibility_acceptance' => 'string',
        'ngo_ong_policy_acceptance' => 'string',
        'passport_number' => 'string',
        'rurf_blocked_domains' => 'string',
        'send_verification_email' => 'string',
        'trademark_id' => 'string',
        'travel_acceptance' => 'string',
        'vat' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'abogado_acceptance' => null,
        'admin_sing_pass_id' => null,
        'allocation_token' => null,
        'bank_acceptance' => null,
        'company_registration_number' => null,
        'domain_name_variants' => null,
        'eligibility_type' => null,
        'eligibility_type_relationship' => null,
        'ftld_token' => null,
        'id_number' => null,
        'id_type' => null,
        'idn_script' => null,
        'insurance_acceptance' => null,
        'intended_use' => null,
        'law_acceptance' => null,
        'legal_type' => null,
        'maintainer' => null,
        'membership_id' => null,
        'mobile_phone_number_verification' => null,
        'ngo_ong_eligibility_acceptance' => null,
        'ngo_ong_policy_acceptance' => null,
        'passport_number' => null,
        'rurf_blocked_domains' => null,
        'send_verification_email' => null,
        'trademark_id' => null,
        'travel_acceptance' => null,
        'vat' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'abogado_acceptance' => false,
        'admin_sing_pass_id' => false,
        'allocation_token' => false,
        'bank_acceptance' => false,
        'company_registration_number' => false,
        'domain_name_variants' => false,
        'eligibility_type' => false,
        'eligibility_type_relationship' => false,
        'ftld_token' => false,
        'id_number' => false,
        'id_type' => false,
        'idn_script' => false,
        'insurance_acceptance' => false,
        'intended_use' => false,
        'law_acceptance' => false,
        'legal_type' => false,
        'maintainer' => false,
        'membership_id' => false,
        'mobile_phone_number_verification' => false,
        'ngo_ong_eligibility_acceptance' => false,
        'ngo_ong_policy_acceptance' => false,
        'passport_number' => false,
        'rurf_blocked_domains' => false,
        'send_verification_email' => false,
        'trademark_id' => false,
        'travel_acceptance' => false,
        'vat' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'abogado_acceptance' => 'abogado_acceptance',
        'admin_sing_pass_id' => 'admin_sing_pass_id',
        'allocation_token' => 'allocation_token',
        'bank_acceptance' => 'bank_acceptance',
        'company_registration_number' => 'company_registration_number',
        'domain_name_variants' => 'domain_name_variants',
        'eligibility_type' => 'eligibility_type',
        'eligibility_type_relationship' => 'eligibility_type_relationship',
        'ftld_token' => 'ftld_token',
        'id_number' => 'id_number',
        'id_type' => 'id_type',
        'idn_script' => 'idn_script',
        'insurance_acceptance' => 'insurance_acceptance',
        'intended_use' => 'intended_use',
        'law_acceptance' => 'law_acceptance',
        'legal_type' => 'legal_type',
        'maintainer' => 'maintainer',
        'membership_id' => 'membership_id',
        'mobile_phone_number_verification' => 'mobile_phone_number_verification',
        'ngo_ong_eligibility_acceptance' => 'ngo_ong_eligibility_acceptance',
        'ngo_ong_policy_acceptance' => 'ngo_ong_policy_acceptance',
        'passport_number' => 'passport_number',
        'rurf_blocked_domains' => 'rurf_blocked_domains',
        'send_verification_email' => 'send_verification_email',
        'trademark_id' => 'trademark_id',
        'travel_acceptance' => 'travel_acceptance',
        'vat' => 'vat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'abogado_acceptance' => 'setAbogadoAcceptance',
        'admin_sing_pass_id' => 'setAdminSingPassId',
        'allocation_token' => 'setAllocationToken',
        'bank_acceptance' => 'setBankAcceptance',
        'company_registration_number' => 'setCompanyRegistrationNumber',
        'domain_name_variants' => 'setDomainNameVariants',
        'eligibility_type' => 'setEligibilityType',
        'eligibility_type_relationship' => 'setEligibilityTypeRelationship',
        'ftld_token' => 'setFtldToken',
        'id_number' => 'setIdNumber',
        'id_type' => 'setIdType',
        'idn_script' => 'setIdnScript',
        'insurance_acceptance' => 'setInsuranceAcceptance',
        'intended_use' => 'setIntendedUse',
        'law_acceptance' => 'setLawAcceptance',
        'legal_type' => 'setLegalType',
        'maintainer' => 'setMaintainer',
        'membership_id' => 'setMembershipId',
        'mobile_phone_number_verification' => 'setMobilePhoneNumberVerification',
        'ngo_ong_eligibility_acceptance' => 'setNgoOngEligibilityAcceptance',
        'ngo_ong_policy_acceptance' => 'setNgoOngPolicyAcceptance',
        'passport_number' => 'setPassportNumber',
        'rurf_blocked_domains' => 'setRurfBlockedDomains',
        'send_verification_email' => 'setSendVerificationEmail',
        'trademark_id' => 'setTrademarkId',
        'travel_acceptance' => 'setTravelAcceptance',
        'vat' => 'setVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'abogado_acceptance' => 'getAbogadoAcceptance',
        'admin_sing_pass_id' => 'getAdminSingPassId',
        'allocation_token' => 'getAllocationToken',
        'bank_acceptance' => 'getBankAcceptance',
        'company_registration_number' => 'getCompanyRegistrationNumber',
        'domain_name_variants' => 'getDomainNameVariants',
        'eligibility_type' => 'getEligibilityType',
        'eligibility_type_relationship' => 'getEligibilityTypeRelationship',
        'ftld_token' => 'getFtldToken',
        'id_number' => 'getIdNumber',
        'id_type' => 'getIdType',
        'idn_script' => 'getIdnScript',
        'insurance_acceptance' => 'getInsuranceAcceptance',
        'intended_use' => 'getIntendedUse',
        'law_acceptance' => 'getLawAcceptance',
        'legal_type' => 'getLegalType',
        'maintainer' => 'getMaintainer',
        'membership_id' => 'getMembershipId',
        'mobile_phone_number_verification' => 'getMobilePhoneNumberVerification',
        'ngo_ong_eligibility_acceptance' => 'getNgoOngEligibilityAcceptance',
        'ngo_ong_policy_acceptance' => 'getNgoOngPolicyAcceptance',
        'passport_number' => 'getPassportNumber',
        'rurf_blocked_domains' => 'getRurfBlockedDomains',
        'send_verification_email' => 'getSendVerificationEmail',
        'trademark_id' => 'getTrademarkId',
        'travel_acceptance' => 'getTravelAcceptance',
        'vat' => 'getVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abogado_acceptance', $data ?? [], null);
        $this->setIfExists('admin_sing_pass_id', $data ?? [], null);
        $this->setIfExists('allocation_token', $data ?? [], null);
        $this->setIfExists('bank_acceptance', $data ?? [], null);
        $this->setIfExists('company_registration_number', $data ?? [], null);
        $this->setIfExists('domain_name_variants', $data ?? [], null);
        $this->setIfExists('eligibility_type', $data ?? [], null);
        $this->setIfExists('eligibility_type_relationship', $data ?? [], null);
        $this->setIfExists('ftld_token', $data ?? [], null);
        $this->setIfExists('id_number', $data ?? [], null);
        $this->setIfExists('id_type', $data ?? [], null);
        $this->setIfExists('idn_script', $data ?? [], null);
        $this->setIfExists('insurance_acceptance', $data ?? [], null);
        $this->setIfExists('intended_use', $data ?? [], null);
        $this->setIfExists('law_acceptance', $data ?? [], null);
        $this->setIfExists('legal_type', $data ?? [], null);
        $this->setIfExists('maintainer', $data ?? [], null);
        $this->setIfExists('membership_id', $data ?? [], null);
        $this->setIfExists('mobile_phone_number_verification', $data ?? [], null);
        $this->setIfExists('ngo_ong_eligibility_acceptance', $data ?? [], null);
        $this->setIfExists('ngo_ong_policy_acceptance', $data ?? [], null);
        $this->setIfExists('passport_number', $data ?? [], null);
        $this->setIfExists('rurf_blocked_domains', $data ?? [], null);
        $this->setIfExists('send_verification_email', $data ?? [], null);
        $this->setIfExists('trademark_id', $data ?? [], null);
        $this->setIfExists('travel_acceptance', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abogado_acceptance
     *
     * @return string|null
     */
    public function getAbogadoAcceptance(): ?string
    {
        return $this->container['abogado_acceptance'];
    }

    /**
     * Sets abogado_acceptance
     *
     * @param string|null $abogado_acceptance abogado_acceptance
     *
     * @return $this
     */
    public function setAbogadoAcceptance(?string $abogado_acceptance): static
    {
        if (is_null($abogado_acceptance)) {
            throw new InvalidArgumentException('non-nullable abogado_acceptance cannot be null');
        }
        $this->container['abogado_acceptance'] = $abogado_acceptance;

        return $this;
    }

    /**
     * Gets admin_sing_pass_id
     *
     * @return string|null
     */
    public function getAdminSingPassId(): ?string
    {
        return $this->container['admin_sing_pass_id'];
    }

    /**
     * Sets admin_sing_pass_id
     *
     * @param string|null $admin_sing_pass_id admin_sing_pass_id
     *
     * @return $this
     */
    public function setAdminSingPassId(?string $admin_sing_pass_id): static
    {
        if (is_null($admin_sing_pass_id)) {
            throw new InvalidArgumentException('non-nullable admin_sing_pass_id cannot be null');
        }
        $this->container['admin_sing_pass_id'] = $admin_sing_pass_id;

        return $this;
    }

    /**
     * Gets allocation_token
     *
     * @return string|null
     */
    public function getAllocationToken(): ?string
    {
        return $this->container['allocation_token'];
    }

    /**
     * Sets allocation_token
     *
     * @param string|null $allocation_token allocation_token
     *
     * @return $this
     */
    public function setAllocationToken(?string $allocation_token): static
    {
        if (is_null($allocation_token)) {
            throw new InvalidArgumentException('non-nullable allocation_token cannot be null');
        }
        $this->container['allocation_token'] = $allocation_token;

        return $this;
    }

    /**
     * Gets bank_acceptance
     *
     * @return string|null
     */
    public function getBankAcceptance(): ?string
    {
        return $this->container['bank_acceptance'];
    }

    /**
     * Sets bank_acceptance
     *
     * @param string|null $bank_acceptance bank_acceptance
     *
     * @return $this
     */
    public function setBankAcceptance(?string $bank_acceptance): static
    {
        if (is_null($bank_acceptance)) {
            throw new InvalidArgumentException('non-nullable bank_acceptance cannot be null');
        }
        $this->container['bank_acceptance'] = $bank_acceptance;

        return $this;
    }

    /**
     * Gets company_registration_number
     *
     * @return string|null
     */
    public function getCompanyRegistrationNumber(): ?string
    {
        return $this->container['company_registration_number'];
    }

    /**
     * Sets company_registration_number
     *
     * @param string|null $company_registration_number company_registration_number
     *
     * @return $this
     */
    public function setCompanyRegistrationNumber(?string $company_registration_number): static
    {
        if (is_null($company_registration_number)) {
            throw new InvalidArgumentException('non-nullable company_registration_number cannot be null');
        }
        $this->container['company_registration_number'] = $company_registration_number;

        return $this;
    }

    /**
     * Gets domain_name_variants
     *
     * @return string|null
     */
    public function getDomainNameVariants(): ?string
    {
        return $this->container['domain_name_variants'];
    }

    /**
     * Sets domain_name_variants
     *
     * @param string|null $domain_name_variants domain_name_variants
     *
     * @return $this
     */
    public function setDomainNameVariants(?string $domain_name_variants): static
    {
        if (is_null($domain_name_variants)) {
            throw new InvalidArgumentException('non-nullable domain_name_variants cannot be null');
        }
        $this->container['domain_name_variants'] = $domain_name_variants;

        return $this;
    }

    /**
     * Gets eligibility_type
     *
     * @return string|null
     */
    public function getEligibilityType(): ?string
    {
        return $this->container['eligibility_type'];
    }

    /**
     * Sets eligibility_type
     *
     * @param string|null $eligibility_type eligibility_type
     *
     * @return $this
     */
    public function setEligibilityType(?string $eligibility_type): static
    {
        if (is_null($eligibility_type)) {
            throw new InvalidArgumentException('non-nullable eligibility_type cannot be null');
        }
        $this->container['eligibility_type'] = $eligibility_type;

        return $this;
    }

    /**
     * Gets eligibility_type_relationship
     *
     * @return string|null
     */
    public function getEligibilityTypeRelationship(): ?string
    {
        return $this->container['eligibility_type_relationship'];
    }

    /**
     * Sets eligibility_type_relationship
     *
     * @param string|null $eligibility_type_relationship eligibility_type_relationship
     *
     * @return $this
     */
    public function setEligibilityTypeRelationship(?string $eligibility_type_relationship): static
    {
        if (is_null($eligibility_type_relationship)) {
            throw new InvalidArgumentException('non-nullable eligibility_type_relationship cannot be null');
        }
        $this->container['eligibility_type_relationship'] = $eligibility_type_relationship;

        return $this;
    }

    /**
     * Gets ftld_token
     *
     * @return string|null
     */
    public function getFtldToken(): ?string
    {
        return $this->container['ftld_token'];
    }

    /**
     * Sets ftld_token
     *
     * @param string|null $ftld_token ftld_token
     *
     * @return $this
     */
    public function setFtldToken(?string $ftld_token): static
    {
        if (is_null($ftld_token)) {
            throw new InvalidArgumentException('non-nullable ftld_token cannot be null');
        }
        $this->container['ftld_token'] = $ftld_token;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string|null
     */
    public function getIdNumber(): ?string
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string|null $id_number id_number
     *
     * @return $this
     */
    public function setIdNumber(?string $id_number): static
    {
        if (is_null($id_number)) {
            throw new InvalidArgumentException('non-nullable id_number cannot be null');
        }
        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets id_type
     *
     * @return string|null
     */
    public function getIdType(): ?string
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     *
     * @param string|null $id_type id_type
     *
     * @return $this
     */
    public function setIdType(?string $id_type): static
    {
        if (is_null($id_type)) {
            throw new InvalidArgumentException('non-nullable id_type cannot be null');
        }
        $this->container['id_type'] = $id_type;

        return $this;
    }

    /**
     * Gets idn_script
     *
     * @return string|null
     */
    public function getIdnScript(): ?string
    {
        return $this->container['idn_script'];
    }

    /**
     * Sets idn_script
     *
     * @param string|null $idn_script idn_script
     *
     * @return $this
     */
    public function setIdnScript(?string $idn_script): static
    {
        if (is_null($idn_script)) {
            throw new InvalidArgumentException('non-nullable idn_script cannot be null');
        }
        $this->container['idn_script'] = $idn_script;

        return $this;
    }

    /**
     * Gets insurance_acceptance
     *
     * @return string|null
     */
    public function getInsuranceAcceptance(): ?string
    {
        return $this->container['insurance_acceptance'];
    }

    /**
     * Sets insurance_acceptance
     *
     * @param string|null $insurance_acceptance insurance_acceptance
     *
     * @return $this
     */
    public function setInsuranceAcceptance(?string $insurance_acceptance): static
    {
        if (is_null($insurance_acceptance)) {
            throw new InvalidArgumentException('non-nullable insurance_acceptance cannot be null');
        }
        $this->container['insurance_acceptance'] = $insurance_acceptance;

        return $this;
    }

    /**
     * Gets intended_use
     *
     * @return string|null
     */
    public function getIntendedUse(): ?string
    {
        return $this->container['intended_use'];
    }

    /**
     * Sets intended_use
     *
     * @param string|null $intended_use intended_use
     *
     * @return $this
     */
    public function setIntendedUse(?string $intended_use): static
    {
        if (is_null($intended_use)) {
            throw new InvalidArgumentException('non-nullable intended_use cannot be null');
        }
        $this->container['intended_use'] = $intended_use;

        return $this;
    }

    /**
     * Gets law_acceptance
     *
     * @return string|null
     */
    public function getLawAcceptance(): ?string
    {
        return $this->container['law_acceptance'];
    }

    /**
     * Sets law_acceptance
     *
     * @param string|null $law_acceptance law_acceptance
     *
     * @return $this
     */
    public function setLawAcceptance(?string $law_acceptance): static
    {
        if (is_null($law_acceptance)) {
            throw new InvalidArgumentException('non-nullable law_acceptance cannot be null');
        }
        $this->container['law_acceptance'] = $law_acceptance;

        return $this;
    }

    /**
     * Gets legal_type
     *
     * @return string|null
     */
    public function getLegalType(): ?string
    {
        return $this->container['legal_type'];
    }

    /**
     * Sets legal_type
     *
     * @param string|null $legal_type legal_type
     *
     * @return $this
     */
    public function setLegalType(?string $legal_type): static
    {
        if (is_null($legal_type)) {
            throw new InvalidArgumentException('non-nullable legal_type cannot be null');
        }
        $this->container['legal_type'] = $legal_type;

        return $this;
    }

    /**
     * Gets maintainer
     *
     * @return string|null
     */
    public function getMaintainer(): ?string
    {
        return $this->container['maintainer'];
    }

    /**
     * Sets maintainer
     *
     * @param string|null $maintainer maintainer
     *
     * @return $this
     */
    public function setMaintainer(?string $maintainer): static
    {
        if (is_null($maintainer)) {
            throw new InvalidArgumentException('non-nullable maintainer cannot be null');
        }
        $this->container['maintainer'] = $maintainer;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return string|null
     */
    public function getMembershipId(): ?string
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param string|null $membership_id membership_id
     *
     * @return $this
     */
    public function setMembershipId(?string $membership_id): static
    {
        if (is_null($membership_id)) {
            throw new InvalidArgumentException('non-nullable membership_id cannot be null');
        }
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets mobile_phone_number_verification
     *
     * @return string|null
     */
    public function getMobilePhoneNumberVerification(): ?string
    {
        return $this->container['mobile_phone_number_verification'];
    }

    /**
     * Sets mobile_phone_number_verification
     *
     * @param string|null $mobile_phone_number_verification mobile_phone_number_verification
     *
     * @return $this
     */
    public function setMobilePhoneNumberVerification(?string $mobile_phone_number_verification): static
    {
        if (is_null($mobile_phone_number_verification)) {
            throw new InvalidArgumentException('non-nullable mobile_phone_number_verification cannot be null');
        }
        $this->container['mobile_phone_number_verification'] = $mobile_phone_number_verification;

        return $this;
    }

    /**
     * Gets ngo_ong_eligibility_acceptance
     *
     * @return string|null
     */
    public function getNgoOngEligibilityAcceptance(): ?string
    {
        return $this->container['ngo_ong_eligibility_acceptance'];
    }

    /**
     * Sets ngo_ong_eligibility_acceptance
     *
     * @param string|null $ngo_ong_eligibility_acceptance ngo_ong_eligibility_acceptance
     *
     * @return $this
     */
    public function setNgoOngEligibilityAcceptance(?string $ngo_ong_eligibility_acceptance): static
    {
        if (is_null($ngo_ong_eligibility_acceptance)) {
            throw new InvalidArgumentException('non-nullable ngo_ong_eligibility_acceptance cannot be null');
        }
        $this->container['ngo_ong_eligibility_acceptance'] = $ngo_ong_eligibility_acceptance;

        return $this;
    }

    /**
     * Gets ngo_ong_policy_acceptance
     *
     * @return string|null
     */
    public function getNgoOngPolicyAcceptance(): ?string
    {
        return $this->container['ngo_ong_policy_acceptance'];
    }

    /**
     * Sets ngo_ong_policy_acceptance
     *
     * @param string|null $ngo_ong_policy_acceptance ngo_ong_policy_acceptance
     *
     * @return $this
     */
    public function setNgoOngPolicyAcceptance(?string $ngo_ong_policy_acceptance): static
    {
        if (is_null($ngo_ong_policy_acceptance)) {
            throw new InvalidArgumentException('non-nullable ngo_ong_policy_acceptance cannot be null');
        }
        $this->container['ngo_ong_policy_acceptance'] = $ngo_ong_policy_acceptance;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string|null
     */
    public function getPassportNumber(): ?string
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string|null $passport_number passport_number
     *
     * @return $this
     */
    public function setPassportNumber(?string $passport_number): static
    {
        if (is_null($passport_number)) {
            throw new InvalidArgumentException('non-nullable passport_number cannot be null');
        }
        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets rurf_blocked_domains
     *
     * @return string|null
     */
    public function getRurfBlockedDomains(): ?string
    {
        return $this->container['rurf_blocked_domains'];
    }

    /**
     * Sets rurf_blocked_domains
     *
     * @param string|null $rurf_blocked_domains rurf_blocked_domains
     *
     * @return $this
     */
    public function setRurfBlockedDomains(?string $rurf_blocked_domains): static
    {
        if (is_null($rurf_blocked_domains)) {
            throw new InvalidArgumentException('non-nullable rurf_blocked_domains cannot be null');
        }
        $this->container['rurf_blocked_domains'] = $rurf_blocked_domains;

        return $this;
    }

    /**
     * Gets send_verification_email
     *
     * @return string|null
     */
    public function getSendVerificationEmail(): ?string
    {
        return $this->container['send_verification_email'];
    }

    /**
     * Sets send_verification_email
     *
     * @param string|null $send_verification_email send_verification_email
     *
     * @return $this
     */
    public function setSendVerificationEmail(?string $send_verification_email): static
    {
        if (is_null($send_verification_email)) {
            throw new InvalidArgumentException('non-nullable send_verification_email cannot be null');
        }
        $this->container['send_verification_email'] = $send_verification_email;

        return $this;
    }

    /**
     * Gets trademark_id
     *
     * @return string|null
     */
    public function getTrademarkId(): ?string
    {
        return $this->container['trademark_id'];
    }

    /**
     * Sets trademark_id
     *
     * @param string|null $trademark_id trademark_id
     *
     * @return $this
     */
    public function setTrademarkId(?string $trademark_id): static
    {
        if (is_null($trademark_id)) {
            throw new InvalidArgumentException('non-nullable trademark_id cannot be null');
        }
        $this->container['trademark_id'] = $trademark_id;

        return $this;
    }

    /**
     * Gets travel_acceptance
     *
     * @return string|null
     */
    public function getTravelAcceptance(): ?string
    {
        return $this->container['travel_acceptance'];
    }

    /**
     * Sets travel_acceptance
     *
     * @param string|null $travel_acceptance travel_acceptance
     *
     * @return $this
     */
    public function setTravelAcceptance(?string $travel_acceptance): static
    {
        if (is_null($travel_acceptance)) {
            throw new InvalidArgumentException('non-nullable travel_acceptance cannot be null');
        }
        $this->container['travel_acceptance'] = $travel_acceptance;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat(): ?string
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return $this
     */
    public function setVat(?string $vat): static
    {
        if (is_null($vat)) {
            throw new InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


