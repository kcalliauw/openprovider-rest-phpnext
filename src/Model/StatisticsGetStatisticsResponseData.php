<?php
/**
 * StatisticsGetStatisticsResponseData
 *
 * PHP version 8.1
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Layer7\Openprovider\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Layer7\Openprovider\ObjectSerializer;

/**
 * StatisticsGetStatisticsResponseData Class Doc Comment
 *
 * @package  Layer7\Openprovider
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class StatisticsGetStatisticsResponseData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'statisticsGetStatisticsResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'customer' => '\Layer7\Openprovider\Model\StatisticsCustomerStatistics',
        'dns' => '\Layer7\Openprovider\Model\StatisticsDnsStatistics',
        'domain' => '\Layer7\Openprovider\Model\StatisticsDomainStatistics',
        'license' => '\Layer7\Openprovider\Model\StatisticsLicenseStatistics',
        'spam_experts' => '\Layer7\Openprovider\Model\StatisticsSpamExpertsStatistics',
        'ssl' => '\Layer7\Openprovider\Model\StatisticsSslStatistics'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'customer' => null,
        'dns' => null,
        'domain' => null,
        'license' => null,
        'spam_experts' => null,
        'ssl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'customer' => false,
        'dns' => false,
        'domain' => false,
        'license' => false,
        'spam_experts' => false,
        'ssl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'customer' => 'customer',
        'dns' => 'dns',
        'domain' => 'domain',
        'license' => 'license',
        'spam_experts' => 'spam_experts',
        'ssl' => 'ssl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'customer' => 'setCustomer',
        'dns' => 'setDns',
        'domain' => 'setDomain',
        'license' => 'setLicense',
        'spam_experts' => 'setSpamExperts',
        'ssl' => 'setSsl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'customer' => 'getCustomer',
        'dns' => 'getDns',
        'domain' => 'getDomain',
        'license' => 'getLicense',
        'spam_experts' => 'getSpamExperts',
        'ssl' => 'getSsl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('dns', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('spam_experts', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return \Layer7\Openprovider\Model\StatisticsCustomerStatistics|null
     */
    public function getCustomer(): ?\Layer7\Openprovider\Model\StatisticsCustomerStatistics
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Layer7\Openprovider\Model\StatisticsCustomerStatistics|null $customer customer
     *
     * @return $this
     */
    public function setCustomer(?\Layer7\Openprovider\Model\StatisticsCustomerStatistics $customer): static
    {
        if (is_null($customer)) {
            throw new InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return \Layer7\Openprovider\Model\StatisticsDnsStatistics|null
     */
    public function getDns(): ?\Layer7\Openprovider\Model\StatisticsDnsStatistics
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param \Layer7\Openprovider\Model\StatisticsDnsStatistics|null $dns dns
     *
     * @return $this
     */
    public function setDns(?\Layer7\Openprovider\Model\StatisticsDnsStatistics $dns): static
    {
        if (is_null($dns)) {
            throw new InvalidArgumentException('non-nullable dns cannot be null');
        }
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Layer7\Openprovider\Model\StatisticsDomainStatistics|null
     */
    public function getDomain(): ?\Layer7\Openprovider\Model\StatisticsDomainStatistics
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Layer7\Openprovider\Model\StatisticsDomainStatistics|null $domain domain
     *
     * @return $this
     */
    public function setDomain(?\Layer7\Openprovider\Model\StatisticsDomainStatistics $domain): static
    {
        if (is_null($domain)) {
            throw new InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets license
     *
     * @return \Layer7\Openprovider\Model\StatisticsLicenseStatistics|null
     */
    public function getLicense(): ?\Layer7\Openprovider\Model\StatisticsLicenseStatistics
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param \Layer7\Openprovider\Model\StatisticsLicenseStatistics|null $license license
     *
     * @return $this
     */
    public function setLicense(?\Layer7\Openprovider\Model\StatisticsLicenseStatistics $license): static
    {
        if (is_null($license)) {
            throw new InvalidArgumentException('non-nullable license cannot be null');
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets spam_experts
     *
     * @return \Layer7\Openprovider\Model\StatisticsSpamExpertsStatistics|null
     */
    public function getSpamExperts(): ?\Layer7\Openprovider\Model\StatisticsSpamExpertsStatistics
    {
        return $this->container['spam_experts'];
    }

    /**
     * Sets spam_experts
     *
     * @param \Layer7\Openprovider\Model\StatisticsSpamExpertsStatistics|null $spam_experts spam_experts
     *
     * @return $this
     */
    public function setSpamExperts(?\Layer7\Openprovider\Model\StatisticsSpamExpertsStatistics $spam_experts): static
    {
        if (is_null($spam_experts)) {
            throw new InvalidArgumentException('non-nullable spam_experts cannot be null');
        }
        $this->container['spam_experts'] = $spam_experts;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return \Layer7\Openprovider\Model\StatisticsSslStatistics|null
     */
    public function getSsl(): ?\Layer7\Openprovider\Model\StatisticsSslStatistics
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param \Layer7\Openprovider\Model\StatisticsSslStatistics|null $ssl ssl
     *
     * @return $this
     */
    public function setSsl(?\Layer7\Openprovider\Model\StatisticsSslStatistics $ssl): static
    {
        if (is_null($ssl)) {
            throw new InvalidArgumentException('non-nullable ssl cannot be null');
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


